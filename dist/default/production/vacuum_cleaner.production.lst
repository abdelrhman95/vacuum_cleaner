

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Jan 19 03:58:36 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 2.10
    51                           ; Generated 31/07/2019 GMT
    52                           ; 
    53                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16F877A Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0006                     	;# 
    91  0007                     	;# 
    92  0008                     	;# 
    93  0009                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000D                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0014                     	;# 
   106  0015                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001B                     	;# 
   115  001C                     	;# 
   116  001D                     	;# 
   117  001E                     	;# 
   118  001F                     	;# 
   119  0081                     	;# 
   120  0085                     	;# 
   121  0086                     	;# 
   122  0087                     	;# 
   123  0088                     	;# 
   124  0089                     	;# 
   125  008C                     	;# 
   126  008D                     	;# 
   127  008E                     	;# 
   128  0091                     	;# 
   129  0092                     	;# 
   130  0093                     	;# 
   131  0094                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  009F                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0008                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0014                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001D                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  0081                     	;# 
   180  0085                     	;# 
   181  0086                     	;# 
   182  0087                     	;# 
   183  0088                     	;# 
   184  0089                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0093                     	;# 
   191  0094                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  000E                     	;# 
   220  000F                     	;# 
   221  0010                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0013                     	;# 
   225  0014                     	;# 
   226  0015                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001B                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  001D                     	;# 
   237  001E                     	;# 
   238  001F                     	;# 
   239  0081                     	;# 
   240  0085                     	;# 
   241  0086                     	;# 
   242  0087                     	;# 
   243  0088                     	;# 
   244  0089                     	;# 
   245  008C                     	;# 
   246  008D                     	;# 
   247  008E                     	;# 
   248  0091                     	;# 
   249  0092                     	;# 
   250  0093                     	;# 
   251  0094                     	;# 
   252  0098                     	;# 
   253  0099                     	;# 
   254  009C                     	;# 
   255  009D                     	;# 
   256  009E                     	;# 
   257  009F                     	;# 
   258  010C                     	;# 
   259  010D                     	;# 
   260  010E                     	;# 
   261  010F                     	;# 
   262  018C                     	;# 
   263  018D                     	;# 
   264  0000                     	;# 
   265  0001                     	;# 
   266  0002                     	;# 
   267  0003                     	;# 
   268  0004                     	;# 
   269  0005                     	;# 
   270  0006                     	;# 
   271  0007                     	;# 
   272  0008                     	;# 
   273  0009                     	;# 
   274  000A                     	;# 
   275  000B                     	;# 
   276  000C                     	;# 
   277  000D                     	;# 
   278  000E                     	;# 
   279  000E                     	;# 
   280  000F                     	;# 
   281  0010                     	;# 
   282  0011                     	;# 
   283  0012                     	;# 
   284  0013                     	;# 
   285  0014                     	;# 
   286  0015                     	;# 
   287  0015                     	;# 
   288  0016                     	;# 
   289  0017                     	;# 
   290  0018                     	;# 
   291  0019                     	;# 
   292  001A                     	;# 
   293  001B                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  001D                     	;# 
   297  001E                     	;# 
   298  001F                     	;# 
   299  0081                     	;# 
   300  0085                     	;# 
   301  0086                     	;# 
   302  0087                     	;# 
   303  0088                     	;# 
   304  0089                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0093                     	;# 
   311  0094                     	;# 
   312  0098                     	;# 
   313  0099                     	;# 
   314  009C                     	;# 
   315  009D                     	;# 
   316  009E                     	;# 
   317  009F                     	;# 
   318  010C                     	;# 
   319  010D                     	;# 
   320  010E                     	;# 
   321  010F                     	;# 
   322  018C                     	;# 
   323  018D                     	;# 
   324  0000                     	;# 
   325  0001                     	;# 
   326  0002                     	;# 
   327  0003                     	;# 
   328  0004                     	;# 
   329  0005                     	;# 
   330  0006                     	;# 
   331  0007                     	;# 
   332  0008                     	;# 
   333  0009                     	;# 
   334  000A                     	;# 
   335  000B                     	;# 
   336  000C                     	;# 
   337  000D                     	;# 
   338  000E                     	;# 
   339  000E                     	;# 
   340  000F                     	;# 
   341  0010                     	;# 
   342  0011                     	;# 
   343  0012                     	;# 
   344  0013                     	;# 
   345  0014                     	;# 
   346  0015                     	;# 
   347  0015                     	;# 
   348  0016                     	;# 
   349  0017                     	;# 
   350  0018                     	;# 
   351  0019                     	;# 
   352  001A                     	;# 
   353  001B                     	;# 
   354  001B                     	;# 
   355  001C                     	;# 
   356  001D                     	;# 
   357  001E                     	;# 
   358  001F                     	;# 
   359  0081                     	;# 
   360  0085                     	;# 
   361  0086                     	;# 
   362  0087                     	;# 
   363  0088                     	;# 
   364  0089                     	;# 
   365  008C                     	;# 
   366  008D                     	;# 
   367  008E                     	;# 
   368  0091                     	;# 
   369  0092                     	;# 
   370  0093                     	;# 
   371  0094                     	;# 
   372  0098                     	;# 
   373  0099                     	;# 
   374  009C                     	;# 
   375  009D                     	;# 
   376  009E                     	;# 
   377  009F                     	;# 
   378  010C                     	;# 
   379  010D                     	;# 
   380  010E                     	;# 
   381  010F                     	;# 
   382  018C                     	;# 
   383  018D                     	;# 
   384  0000                     	;# 
   385  0001                     	;# 
   386  0002                     	;# 
   387  0003                     	;# 
   388  0004                     	;# 
   389  0005                     	;# 
   390  0006                     	;# 
   391  0007                     	;# 
   392  0008                     	;# 
   393  0009                     	;# 
   394  000A                     	;# 
   395  000B                     	;# 
   396  000C                     	;# 
   397  000D                     	;# 
   398  000E                     	;# 
   399  000E                     	;# 
   400  000F                     	;# 
   401  0010                     	;# 
   402  0011                     	;# 
   403  0012                     	;# 
   404  0013                     	;# 
   405  0014                     	;# 
   406  0015                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  001D                     	;# 
   417  001E                     	;# 
   418  001F                     	;# 
   419  0081                     	;# 
   420  0085                     	;# 
   421  0086                     	;# 
   422  0087                     	;# 
   423  0088                     	;# 
   424  0089                     	;# 
   425  008C                     	;# 
   426  008D                     	;# 
   427  008E                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0093                     	;# 
   431  0094                     	;# 
   432  0098                     	;# 
   433  0099                     	;# 
   434  009C                     	;# 
   435  009D                     	;# 
   436  009E                     	;# 
   437  009F                     	;# 
   438  010C                     	;# 
   439  010D                     	;# 
   440  010E                     	;# 
   441  010F                     	;# 
   442  018C                     	;# 
   443  018D                     	;# 
   444  0000                     	;# 
   445  0001                     	;# 
   446  0002                     	;# 
   447  0003                     	;# 
   448  0004                     	;# 
   449  0005                     	;# 
   450  0006                     	;# 
   451  0007                     	;# 
   452  0008                     	;# 
   453  0009                     	;# 
   454  000A                     	;# 
   455  000B                     	;# 
   456  000C                     	;# 
   457  000D                     	;# 
   458  000E                     	;# 
   459  000E                     	;# 
   460  000F                     	;# 
   461  0010                     	;# 
   462  0011                     	;# 
   463  0012                     	;# 
   464  0013                     	;# 
   465  0014                     	;# 
   466  0015                     	;# 
   467  0015                     	;# 
   468  0016                     	;# 
   469  0017                     	;# 
   470  0018                     	;# 
   471  0019                     	;# 
   472  001A                     	;# 
   473  001B                     	;# 
   474  001B                     	;# 
   475  001C                     	;# 
   476  001D                     	;# 
   477  001E                     	;# 
   478  001F                     	;# 
   479  0081                     	;# 
   480  0085                     	;# 
   481  0086                     	;# 
   482  0087                     	;# 
   483  0088                     	;# 
   484  0089                     	;# 
   485  008C                     	;# 
   486  008D                     	;# 
   487  008E                     	;# 
   488  0091                     	;# 
   489  0092                     	;# 
   490  0093                     	;# 
   491  0094                     	;# 
   492  0098                     	;# 
   493  0099                     	;# 
   494  009C                     	;# 
   495  009D                     	;# 
   496  009E                     	;# 
   497  009F                     	;# 
   498  010C                     	;# 
   499  010D                     	;# 
   500  010E                     	;# 
   501  010F                     	;# 
   502  018C                     	;# 
   503  018D                     	;# 
   504  0000                     	;# 
   505  0001                     	;# 
   506  0002                     	;# 
   507  0003                     	;# 
   508  0004                     	;# 
   509  0005                     	;# 
   510  0006                     	;# 
   511  0007                     	;# 
   512  0008                     	;# 
   513  0009                     	;# 
   514  000A                     	;# 
   515  000B                     	;# 
   516  000C                     	;# 
   517  000D                     	;# 
   518  000E                     	;# 
   519  000E                     	;# 
   520  000F                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0013                     	;# 
   525  0014                     	;# 
   526  0015                     	;# 
   527  0015                     	;# 
   528  0016                     	;# 
   529  0017                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  001B                     	;# 
   534  001B                     	;# 
   535  001C                     	;# 
   536  001D                     	;# 
   537  001E                     	;# 
   538  001F                     	;# 
   539  0081                     	;# 
   540  0085                     	;# 
   541  0086                     	;# 
   542  0087                     	;# 
   543  0088                     	;# 
   544  0089                     	;# 
   545  008C                     	;# 
   546  008D                     	;# 
   547  008E                     	;# 
   548  0091                     	;# 
   549  0092                     	;# 
   550  0093                     	;# 
   551  0094                     	;# 
   552  0098                     	;# 
   553  0099                     	;# 
   554  009C                     	;# 
   555  009D                     	;# 
   556  009E                     	;# 
   557  009F                     	;# 
   558  010C                     	;# 
   559  010D                     	;# 
   560  010E                     	;# 
   561  010F                     	;# 
   562  018C                     	;# 
   563  018D                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0008                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000D                     	;# 
   578  000E                     	;# 
   579  000E                     	;# 
   580  000F                     	;# 
   581  0010                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0014                     	;# 
   586  0015                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  001D                     	;# 
   597  001E                     	;# 
   598  001F                     	;# 
   599  0081                     	;# 
   600  0085                     	;# 
   601  0086                     	;# 
   602  0087                     	;# 
   603  0088                     	;# 
   604  0089                     	;# 
   605  008C                     	;# 
   606  008D                     	;# 
   607  008E                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0094                     	;# 
   612  0098                     	;# 
   613  0099                     	;# 
   614  009C                     	;# 
   615  009D                     	;# 
   616  009E                     	;# 
   617  009F                     	;# 
   618  010C                     	;# 
   619  010D                     	;# 
   620  010E                     	;# 
   621  010F                     	;# 
   622  018C                     	;# 
   623  018D                     	;# 
   624                           
   625                           	psect	idataCOMMON
   626  065F                     __pidataCOMMON:	
   627                           
   628                           ;initializer for MOT_Update@motor_tick_counter
   629  065F  340A               	retlw	10
   630                           
   631                           	psect	idataBANK0
   632  062D                     __pidataBANK0:	
   633                           
   634                           ;initializer for _SSD_Data
   635  062D  3408               	retlw	8
   636  062E  3448               	retlw	72
   637  062F  3449               	retlw	73
   638  0630  3400               	retlw	0
   639                           
   640                           ;initializer for _SSD_Values
   641  0631  3403               	retlw	3
   642  0632  3400               	retlw	0
   643  0633  3400               	retlw	0
   644                           
   645                           ;initializer for VC_update@VC_counter
   646  0634  340A               	retlw	10
   647                           
   648                           	psect	nvBANK0
   649  0049                     __pnvBANK0:	
   650  0049                     _motor_state:	
   651  0049                     	ds	1
   652  004A                     _Target_firing_angle:	
   653  004A                     	ds	1
   654  004B                     _Actual_angle:	
   655  004B                     	ds	1
   656  004C                     _Motor_speed:	
   657  004C                     	ds	1
   658  000E                     _TMR1	set	14
   659  0001                     _TMR0	set	1
   660  0008                     _PORTD	set	8
   661  0006                     _PORTB	set	6
   662  0007                     _PORTC	set	7
   663  005E                     _PEIE	set	94
   664  0060                     _TMR1IF	set	96
   665  0080                     _TMR1ON	set	128
   666  0081                     _TMR1CS	set	129
   667  0083                     _T1OSCEN	set	131
   668  0084                     _T1CKPS0	set	132
   669  0085                     _T1CKPS1	set	133
   670  005F                     _GIE	set	95
   671  005D                     _TMR0IE	set	93
   672  005A                     _TMR0IF	set	90
   673  0088                     _TRISD	set	136
   674  0086                     _TRISB	set	134
   675  0087                     _TRISC	set	135
   676  0460                     _TMR1IE	set	1120
   677  040D                     _T0CS	set	1037
   678  040B                     _PSA	set	1035
   679  0408                     _PS0	set	1032
   680  0409                     _PS1	set	1033
   681  040A                     _PS2	set	1034
   682                           
   683                           ; #config settings
   684  0000                     
   685                           	psect	cinit
   686  000F                     start_initialization:	
   687  000F                     __initialization:	
   688                           
   689                           ; Initialize objects allocated to BANK0
   690  000F  1383               	bcf	3,7	;select IRP bank0
   691  0010  3049               	movlw	low (__pdataBANK0+8)
   692  0011  00FD               	movwf	btemp+-1
   693  0012  3006               	movlw	high __pidataBANK0
   694  0013  00FE               	movwf	btemp
   695  0014  302D               	movlw	low __pidataBANK0
   696  0015  00FF               	movwf	btemp+1
   697  0016  3041               	movlw	low __pdataBANK0
   698  0017  0084               	movwf	4
   699  0018  120A  118A  25C9  120A  118A  	fcall	init_ram0
   700                           
   701                           ; Initialize objects allocated to COMMON
   702  001D  120A  118A  265F  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   703  0022  00FD               	movwf	__pdataCOMMON& (0+127)
   704                           
   705                           ; Clear objects allocated to BANK0
   706  0023  3020               	movlw	low __pbssBANK0
   707  0024  0084               	movwf	4
   708  0025  3034               	movlw	low (__pbssBANK0+20)
   709  0026  120A  118A  2635  120A  118A  	fcall	clear_ram0
   710                           
   711                           ; Clear objects allocated to COMMON
   712  002B  01FC               	clrf	__pbssCOMMON& (0+127)
   713  002C                     end_of_initialization:	
   714                           ;End of C runtime variable initialization code
   715                           
   716  002C                     __end_of__initialization:	
   717  002C  0183               	clrf	3
   718  002D  120A  118A  2AD7   	ljmp	_main	;jump to C main() function
   719                           
   720                           	psect	bssCOMMON
   721  007C                     __pbssCOMMON:	
   722  007C                     _Switching_Counter:	
   723  007C                     	ds	1
   724                           
   725                           	psect	dataCOMMON
   726  007D                     __pdataCOMMON:	
   727  007D                     MOT_Update@motor_tick_counter:	
   728  007D                     	ds	1
   729                           
   730                           	psect	bssBANK0
   731  0020                     __pbssBANK0:	
   732  0020                     _SWs_Info:	
   733  0020                     	ds	9
   734  0029                     DISP_Update@DISP_counter:	
   735  0029                     	ds	2
   736  002B                     _PRESSURE_COUNTER:	
   737  002B                     	ds	2
   738  002D                     SSD_Update@SSD_counter:	
   739  002D                     	ds	2
   740  002F                     SW_Update@SW_counter:	
   741  002F                     	ds	2
   742  0031                     _SSD_DotState:	
   743  0031                     	ds	1
   744  0032                     _SSD_current:	
   745  0032                     	ds	1
   746  0033                     _ISR_FLAG:	
   747  0033                     	ds	1
   748                           
   749                           	psect	dataBANK0
   750  0041                     __pdataBANK0:	
   751  0041                     _SSD_Data:	
   752  0041                     	ds	4
   753  0045                     _SSD_Values:	
   754  0045                     	ds	3
   755  0048                     VC_update@VC_counter:	
   756  0048                     	ds	1
   757                           
   758                           	psect	inittext
   759  05C5                     init_fetch0:	
   760                           ;	Called with low address in FSR and high address in W
   761                           
   762  05C5  087E               	movf	btemp,w
   763  05C6  008A               	movwf	10
   764  05C7  087F               	movf	btemp+1,w
   765  05C8  0082               	movwf	2
   766  05C9                     init_ram0:	
   767                           ;Called with:
   768                           ;	high address of idata address in btemp 
   769                           ;	low address of idata address in btemp+1 
   770                           ;	low address of data in FSR
   771                           ;	high address + 1 of data in btemp-1
   772                           
   773  05C9  120A  118A  25C5  120A  118A  	fcall	init_fetch0
   774  05CE  0080               	movwf	0
   775  05CF  0A84               	incf	4,f
   776  05D0  0804               	movf	4,w
   777  05D1  067D               	xorwf	btemp+-1,w
   778  05D2  1903               	btfsc	3,2
   779  05D3  3400               	retlw	0
   780  05D4  0AFF               	incf	btemp+1,f
   781  05D5  1903               	btfsc	3,2
   782  05D6  0AFE               	incf	btemp,f
   783  05D7  2DC9               	goto	init_ram0
   784                           
   785                           	psect	clrtext
   786  0635                     clear_ram0:	
   787                           ;	Called with FSR containing the base address, and
   788                           ;	W with the last address+1
   789                           
   790  0635  0064               	clrwdt	;clear the watchdog before getting into this loop
   791  0636                     clrloop0:	
   792  0636  0180               	clrf	0	;clear RAM location pointed to by FSR
   793  0637  0A84               	incf	4,f	;increment pointer
   794  0638  0604               	xorwf	4,w	;XOR with final address
   795  0639  1903               	btfsc	3,2	;have we reached the end yet?
   796  063A  3400               	retlw	0	;all done for this memory range, return
   797  063B  0604               	xorwf	4,w	;XOR again to restore value
   798  063C  2E36               	goto	clrloop0	;do the next byte
   799                           
   800                           	psect	cstackCOMMON
   801  0070                     __pcstackCOMMON:	
   802  0070                     ?_VC_Init:	
   803  0070                     ?_TMR0_Init:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  0070                     ?_TMR0_Start:	
   807                           ; 1 bytes @ 0x0
   808                           
   809  0070                     ?_TMR1_Init:	
   810                           ; 1 bytes @ 0x0
   811                           
   812  0070                     ?_DISP_Init:	
   813                           ; 1 bytes @ 0x0
   814                           
   815  0070                     ?_SW_Init:	
   816                           ; 1 bytes @ 0x0
   817                           
   818  0070                     ?_SSD_Update:	
   819                           ; 1 bytes @ 0x0
   820                           
   821  0070                     ?_SW_Update:	
   822                           ; 1 bytes @ 0x0
   823                           
   824  0070                     ?_DISP_Update:	
   825                           ; 1 bytes @ 0x0
   826                           
   827  0070                     ?_VC_update:	
   828                           ; 1 bytes @ 0x0
   829                           
   830  0070                     ?_MOT_Update:	
   831                           ; 1 bytes @ 0x0
   832                           
   833  0070                     ?_TMR1_CheckOverflow:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0070                     ??_TMR1_CheckOverflow:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0070                     ?_TMR1_ISR:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0070                     ?_TMR0_CheckOverFlow:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0070                     ??_TMR0_CheckOverFlow:	
   846                           ; 1 bytes @ 0x0
   847                           
   848  0070                     ?_TMR0_ISR:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0070                     ?_MOT_Init:	
   852                           ; 1 bytes @ 0x0
   853                           
   854  0070                     ?_handling_switch_events:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0070                     ?_MOT_SetTargetAngle:	
   858                           ; 1 bytes @ 0x0
   859                           
   860  0070                     ?_Generic_ISR:	
   861                           ; 1 bytes @ 0x0
   862                           
   863  0070                     ?_SW_GetState:	
   864                           ; 1 bytes @ 0x0
   865                           
   866  0070                     ?_VC_GetSpeed:	
   867                           ; 1 bytes @ 0x0
   868                           
   869  0070                     ?_Get_actual:	
   870                           ; 1 bytes @ 0x0
   871                           
   872  0070                     ??_Get_actual:	
   873                           ; 1 bytes @ 0x0
   874                           
   875  0070                     ?_Firing_Pulse:	
   876                           ; 1 bytes @ 0x0
   877                           
   878  0070                     ??_Firing_Pulse:	
   879                           ; 1 bytes @ 0x0
   880                           
   881  0070                     ?_main:	
   882                           ; 1 bytes @ 0x0
   883                           
   884  0070                     ?i1___wmul:	
   885                           ; 2 bytes @ 0x0
   886                           
   887  0070                     i1___wmul@multiplier:	
   888                           ; 2 bytes @ 0x0
   889                           
   890                           
   891                           ; 2 bytes @ 0x0
   892  0070                     	ds	1
   893  0071                     ??_TMR1_ISR:	
   894                           
   895                           ; 1 bytes @ 0x1
   896  0071                     	ds	1
   897  0072                     i1___wmul@multiplicand:	
   898                           
   899                           ; 2 bytes @ 0x2
   900  0072                     	ds	2
   901  0074                     ??i1___wmul:	
   902  0074                     i1___wmul@product:	
   903                           ; 1 bytes @ 0x4
   904                           
   905                           
   906                           ; 2 bytes @ 0x4
   907  0074                     	ds	2
   908  0076                     ?_TMR1_Start:	
   909  0076                     TMR1_Start@Degree:	
   910                           ; 1 bytes @ 0x6
   911                           
   912                           
   913                           ; 2 bytes @ 0x6
   914  0076                     	ds	2
   915  0078                     ??_TMR0_ISR:	
   916  0078                     ??_TMR1_Start:	
   917                           ; 1 bytes @ 0x8
   918                           
   919                           
   920                           ; 1 bytes @ 0x8
   921  0078                     	ds	2
   922  007A                     ??_Generic_ISR:	
   923                           
   924                           ; 1 bytes @ 0xA
   925  007A                     	ds	2
   926                           
   927                           	psect	cstackBANK0
   928  0034                     __pcstackBANK0:	
   929  0034                     ??_TMR0_Init:	
   930  0034                     ??_TMR0_Start:	
   931                           ; 1 bytes @ 0x0
   932                           
   933  0034                     ??_TMR1_Init:	
   934                           ; 1 bytes @ 0x0
   935                           
   936  0034                     ??_MOT_Update:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0034                     ?_SSD_SetState:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0034                     ??_MOT_Init:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0034                     ??_MOT_SetTargetAngle:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0034                     ?_SSD_SetValue:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0034                     ??_VC_GetSpeed:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0034                     ?___bmul:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0034                     SSD_SetValue@ssd_symbol:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0034                     SSD_SetState@state:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0034                     ___bmul@multiplicand:	
   964                           ; 1 bytes @ 0x0
   965                           
   966                           
   967                           ; 1 bytes @ 0x0
   968  0034                     	ds	1
   969  0035                     ??_SSD_SetState:	
   970  0035                     ??_SSD_SetValue:	
   971                           ; 1 bytes @ 0x1
   972                           
   973  0035                     ??___bmul:	
   974                           ; 1 bytes @ 0x1
   975                           
   976  0035                     MOT_Init@M:	
   977                           ; 1 bytes @ 0x1
   978                           
   979  0035                     MOT_SetTargetAngle@M:	
   980                           ; 1 bytes @ 0x1
   981                           
   982                           
   983                           ; 1 bytes @ 0x1
   984  0035                     	ds	1
   985  0036                     ??_VC_Init:	
   986  0036                     SSD_SetValue@ssd:	
   987                           ; 1 bytes @ 0x2
   988                           
   989  0036                     ___bmul@product:	
   990                           ; 1 bytes @ 0x2
   991                           
   992                           
   993                           ; 1 bytes @ 0x2
   994  0036                     	ds	1
   995  0037                     ??_DISP_Update:	
   996  0037                     SSD_SetState@ssd:	
   997                           ; 1 bytes @ 0x3
   998                           
   999  0037                     VC_Init@speed:	
  1000                           ; 1 bytes @ 0x3
  1001                           
  1002  0037                     ___bmul@multiplier:	
  1003                           ; 1 bytes @ 0x3
  1004                           
  1005                           
  1006                           ; 1 bytes @ 0x3
  1007  0037                     	ds	1
  1008  0038                     ??_SW_Init:	
  1009  0038                     ??_SW_Update:	
  1010                           ; 1 bytes @ 0x4
  1011                           
  1012  0038                     ?_SSD_Out:	
  1013                           ; 1 bytes @ 0x4
  1014                           
  1015  0038                     ??_SW_GetState:	
  1016                           ; 1 bytes @ 0x4
  1017                           
  1018  0038                     SSD_Out@ssd_symbol:	
  1019                           ; 1 bytes @ 0x4
  1020                           
  1021                           
  1022                           ; 1 bytes @ 0x4
  1023  0038                     	ds	1
  1024  0039                     ??_SSD_Out:	
  1025  0039                     SW_Init@index:	
  1026                           ; 1 bytes @ 0x5
  1027                           
  1028  0039                     SW_GetState@sw:	
  1029                           ; 1 bytes @ 0x5
  1030                           
  1031  0039                     SSD_Out@ssd:	
  1032                           ; 1 bytes @ 0x5
  1033                           
  1034                           
  1035                           ; 1 bytes @ 0x5
  1036  0039                     	ds	1
  1037  003A                     ??_SSD_Update:	
  1038  003A                     ??_handling_switch_events:	
  1039                           ; 1 bytes @ 0x6
  1040                           
  1041  003A                     ?_SSD_Init:	
  1042                           ; 1 bytes @ 0x6
  1043                           
  1044  003A                     SSD_Init@symbol:	
  1045                           ; 1 bytes @ 0x6
  1046                           
  1047                           
  1048                           ; 1 bytes @ 0x6
  1049  003A                     	ds	1
  1050  003B                     ??_SSD_Init:	
  1051  003B                     SW_Update@index:	
  1052                           ; 1 bytes @ 0x7
  1053                           
  1054                           
  1055                           ; 1 bytes @ 0x7
  1056  003B                     	ds	1
  1057  003C                     ??_VC_update:	
  1058                           
  1059                           ; 1 bytes @ 0x8
  1060  003C                     	ds	3
  1061  003F                     SSD_Init@ssd:	
  1062                           
  1063                           ; 1 bytes @ 0xB
  1064  003F                     	ds	1
  1065  0040                     ??_DISP_Init:	
  1066                           
  1067                           ; 1 bytes @ 0xC
  1068  0040                     	ds	1
  1069  0041                     ??_main:	
  1070                           
  1071                           	psect	maintext
  1072  02D7                     __pmaintext:	
  1073                           ; 1 bytes @ 0xD
  1074 ;;
  1075 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1076 ;;
  1077 ;; *************** function _main *****************
  1078 ;; Defined at:
  1079 ;;		line 37 in file "main.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;		None
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;		None
  1084 ;; Return value:  Size  Location     Type
  1085 ;;                  2   40[None  ] int 
  1086 ;; Registers used:
  1087 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1088 ;; Tracked objects:
  1089 ;;		On entry : B00/0
  1090 ;;		On exit  : 0/0
  1091 ;;		Unchanged: 0/0
  1092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1093 ;;      Params:         0       0       0       0       0
  1094 ;;      Locals:         0       0       0       0       0
  1095 ;;      Temps:          0       0       0       0       0
  1096 ;;      Totals:         0       0       0       0       0
  1097 ;;Total ram usage:        0 bytes
  1098 ;; Hardware stack levels required when called:    8
  1099 ;; This function calls:
  1100 ;;		_DISP_Init
  1101 ;;		_DISP_Update
  1102 ;;		_MOT_Update
  1103 ;;		_SSD_Update
  1104 ;;		_SW_Init
  1105 ;;		_SW_Update
  1106 ;;		_TMR0_Init
  1107 ;;		_TMR0_Start
  1108 ;;		_TMR1_Init
  1109 ;;		_VC_Init
  1110 ;;		_VC_update
  1111 ;; This function is called by:
  1112 ;;		Startup code after reset
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           
  1117                           ;psect for function _main
  1118  02D7                     _main:	
  1119  02D7                     l1976:	
  1120                           ;incstack = 0
  1121                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1122                           
  1123  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  1124  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  1125  02D9  01B3               	clrf	_ISR_FLAG	;volatile
  1126  02DA                     l1978:	
  1127  02DA  305A               	movlw	90
  1128  02DB  120A  118A  255F  120A  118A  	fcall	_VC_Init
  1129  02E0                     l1980:	
  1130  02E0  120A  118A  2645  120A  118A  	fcall	_TMR0_Init
  1131  02E5                     l1982:	
  1132  02E5  120A  118A  2618  120A  118A  	fcall	_TMR0_Start
  1133  02EA                     l1984:	
  1134  02EA  120A  118A  263D  120A  118A  	fcall	_TMR1_Init
  1135  02EF                     l1986:	
  1136  02EF  120A  118A  24B6  120A  118A  	fcall	_DISP_Init
  1137  02F4                     l1988:	
  1138  02F4  120A  118A  23CD  120A  118A  	fcall	_SW_Init
  1139  02F9                     l1990:	
  1140  02F9  1683               	bsf	3,5	;RP0=1, select bank1
  1141  02FA  1303               	bcf	3,6	;RP1=0, select bank1
  1142  02FB  0807               	movf	7,w	;volatile
  1143  02FC  39EF               	andlw	239
  1144  02FD  0087               	movwf	7	;volatile
  1145  02FE                     l1992:	
  1146  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  1147  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  1148  0300  0807               	movf	7,w	;volatile
  1149  0301  39EF               	andlw	239
  1150  0302  0087               	movwf	7	;volatile
  1151  0303                     l1994:	
  1152  0303  0833               	movf	_ISR_FLAG,w	;volatile
  1153  0304  1903               	btfsc	3,2
  1154  0305  2B07               	goto	u761
  1155  0306  2B08               	goto	u760
  1156  0307                     u761:	
  1157  0307  2B03               	goto	l1994
  1158  0308                     u760:	
  1159  0308                     l1996:	
  1160  0308  0807               	movf	7,w	;volatile
  1161  0309  3A10               	xorlw	16
  1162  030A  0087               	movwf	7	;volatile
  1163  030B                     l1998:	
  1164  030B  120A  118A  245A  120A  118A  	fcall	_SSD_Update
  1165  0310                     l2000:	
  1166  0310  120A  118A  2030  120A  118A  	fcall	_SW_Update
  1167  0315                     l2002:	
  1168  0315  120A  118A  224E  120A  118A  	fcall	_DISP_Update
  1169  031A                     l2004:	
  1170  031A  120A  118A  2543  120A  118A  	fcall	_VC_update
  1171  031F                     l2006:	
  1172  031F  120A  118A  232B  120A  118A  	fcall	_MOT_Update
  1173  0324                     l2008:	
  1174  0324  1283               	bcf	3,5	;RP0=0, select bank0
  1175  0325  1303               	bcf	3,6	;RP1=0, select bank0
  1176  0326  01B3               	clrf	_ISR_FLAG	;volatile
  1177  0327  2B03               	goto	l1994
  1178  0328  120A  118A  280C   	ljmp	start
  1179  032B                     __end_of_main:	
  1180                           
  1181                           	psect	text1
  1182  0543                     __ptext1:	
  1183 ;; *************** function _VC_update *****************
  1184 ;; Defined at:
  1185 ;;		line 57 in file "VC.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;		None
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  1    wreg      void 
  1192 ;; Registers used:
  1193 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1199 ;;      Params:         0       0       0       0       0
  1200 ;;      Locals:         0       0       0       0       0
  1201 ;;      Temps:          0       1       0       0       0
  1202 ;;      Totals:         0       1       0       0       0
  1203 ;;Total ram usage:        1 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    7
  1206 ;; This function calls:
  1207 ;;		_MOT_SetTargetAngle
  1208 ;;		_handling_switch_events
  1209 ;; This function is called by:
  1210 ;;		_main
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           
  1215                           ;psect for function _VC_update
  1216  0543                     _VC_update:	
  1217  0543                     l1922:	
  1218                           ;incstack = 0
  1219                           ; Regs used in _VC_update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1220                           
  1221                           
  1222                           ;VC.c: 61:      static uint8 VC_counter = 10;;VC.c: 64:      VC_counter += (10);
  1223  0543  300A               	movlw	10
  1224  0544  1283               	bcf	3,5	;RP0=0, select bank0
  1225  0545  1303               	bcf	3,6	;RP1=0, select bank0
  1226  0546  00BC               	movwf	??_VC_update
  1227  0547  083C               	movf	??_VC_update,w
  1228  0548  07C8               	addwf	VC_update@VC_counter,f
  1229                           
  1230                           ;VC.c: 67:      if(VC_counter != (20))
  1231  0549  3014               	movlw	20
  1232  054A  0648               	xorwf	VC_update@VC_counter,w
  1233  054B  1903               	btfsc	3,2
  1234  054C  2D4E               	goto	u701
  1235  054D  2D4F               	goto	u700
  1236  054E                     u701:	
  1237  054E  2D50               	goto	l1926
  1238  054F                     u700:	
  1239  054F  2D5E               	goto	l185
  1240  0550                     l1926:	
  1241                           
  1242                           ;VC.c: 72:      VC_counter = 0;
  1243  0550  01C8               	clrf	VC_update@VC_counter
  1244  0551                     l1928:	
  1245                           
  1246                           ;VC.c: 83:    handling_switch_events();
  1247  0551  120A  118A  21B1  120A  118A  	fcall	_handling_switch_events
  1248  0556                     l1930:	
  1249                           
  1250                           ;VC.c: 86:    MOT_SetTargetAngle(Motor_speed);
  1251  0556  1283               	bcf	3,5	;RP0=0, select bank0
  1252  0557  1303               	bcf	3,6	;RP1=0, select bank0
  1253  0558  084C               	movf	_Motor_speed,w
  1254  0559  120A  118A  25EA  120A  118A  	fcall	_MOT_SetTargetAngle
  1255  055E                     l185:	
  1256  055E  0008               	return
  1257  055F                     __end_of_VC_update:	
  1258                           
  1259                           	psect	text2
  1260  01B1                     __ptext2:	
  1261 ;; *************** function _handling_switch_events *****************
  1262 ;; Defined at:
  1263 ;;		line 100 in file "VC.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;		None
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;		None
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  1    wreg      void 
  1270 ;; Registers used:
  1271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1277 ;;      Params:         0       0       0       0       0
  1278 ;;      Locals:         0       0       0       0       0
  1279 ;;      Temps:          0       2       0       0       0
  1280 ;;      Totals:         0       2       0       0       0
  1281 ;;Total ram usage:        2 bytes
  1282 ;; Hardware stack levels used:    1
  1283 ;; Hardware stack levels required when called:    6
  1284 ;; This function calls:
  1285 ;;		_SW_GetState
  1286 ;; This function is called by:
  1287 ;;		_VC_update
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           
  1292                           ;psect for function _handling_switch_events
  1293  01B1                     _handling_switch_events:	
  1294  01B1                     l1696:	
  1295                           ;incstack = 0
  1296                           ; Regs used in _handling_switch_events: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1297                           
  1298                           
  1299                           ;VC.c: 104:     if(SW_GetState(SW_PLUS) == SW_PRE_PRESSED)
  1300  01B1  3000               	movlw	0
  1301  01B2  120A  118A  25D8  120A  118A  	fcall	_SW_GetState
  1302  01B7  3A01               	xorlw	1
  1303  01B8  1D03               	skipz
  1304  01B9  29BB               	goto	u491
  1305  01BA  29BC               	goto	u490
  1306  01BB                     u491:	
  1307  01BB  29DC               	goto	l1708
  1308  01BC                     u490:	
  1309  01BC  29C7               	goto	l1706
  1310  01BD                     l1700:	
  1311                           
  1312                           ;VC.c: 109:             {;VC.c: 110:                 Motor_speed = Mid_speed;
  1313  01BD  305A               	movlw	90
  1314  01BE  00BA               	movwf	??_handling_switch_events
  1315  01BF  083A               	movf	??_handling_switch_events,w
  1316  01C0  00CC               	movwf	_Motor_speed
  1317                           
  1318                           ;VC.c: 111:                 break;
  1319  01C1  29DC               	goto	l1708
  1320  01C2                     l1702:	
  1321                           
  1322                           ;VC.c: 115:             {;VC.c: 116:                 Motor_speed = Max_speed;
  1323  01C2  300A               	movlw	10
  1324  01C3  00BA               	movwf	??_handling_switch_events
  1325  01C4  083A               	movf	??_handling_switch_events,w
  1326  01C5  00CC               	movwf	_Motor_speed
  1327                           
  1328                           ;VC.c: 117:                 break;
  1329  01C6  29DC               	goto	l1708
  1330  01C7                     l1706:	
  1331  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  1332  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  1333  01C9  084C               	movf	_Motor_speed,w
  1334  01CA  00BA               	movwf	??_handling_switch_events
  1335  01CB  01BB               	clrf	??_handling_switch_events+1
  1336                           
  1337                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1338                           ; Switch size 1, requested type "simple"
  1339                           ; Number of cases is 1, Range of values is 0 to 0
  1340                           ; switch strategies available:
  1341                           ; Name         Instructions Cycles
  1342                           ; simple_byte            4     3 (average)
  1343                           ; direct_byte           11     8 (fixed)
  1344                           ; jumptable            260     6 (fixed)
  1345                           ;	Chosen strategy is simple_byte
  1346  01CC  083B               	movf	??_handling_switch_events+1,w
  1347  01CD  3A00               	xorlw	0	; case 0
  1348  01CE  1903               	skipnz
  1349  01CF  29D1               	goto	l2198
  1350  01D0  29DC               	goto	l1708
  1351  01D1                     l2198:	
  1352                           
  1353                           ; Switch size 1, requested type "simple"
  1354                           ; Number of cases is 3, Range of values is 10 to 140
  1355                           ; switch strategies available:
  1356                           ; Name         Instructions Cycles
  1357                           ; simple_byte           10     6 (average)
  1358                           ; jumptable            263     9 (fixed)
  1359                           ;	Chosen strategy is simple_byte
  1360  01D1  083A               	movf	??_handling_switch_events,w
  1361  01D2  3A0A               	xorlw	10	; case 10
  1362  01D3  1903               	skipnz
  1363  01D4  29DC               	goto	l1708
  1364  01D5  3A50               	xorlw	80	; case 90
  1365  01D6  1903               	skipnz
  1366  01D7  29C2               	goto	l1702
  1367  01D8  3AD6               	xorlw	214	; case 140
  1368  01D9  1903               	skipnz
  1369  01DA  29BD               	goto	l1700
  1370  01DB  29DC               	goto	l1708
  1371  01DC                     l1708:	
  1372                           
  1373                           ;VC.c: 136:     if(SW_GetState(SW_MINUS) == (SW_PRE_PRESSED))
  1374  01DC  3001               	movlw	1
  1375  01DD  120A  118A  25D8  120A  118A  	fcall	_SW_GetState
  1376  01E2  3A01               	xorlw	1
  1377  01E3  1D03               	skipz
  1378  01E4  29E6               	goto	u501
  1379  01E5  29E7               	goto	u500
  1380  01E6                     u501:	
  1381  01E6  2A07               	goto	l1720
  1382  01E7                     u500:	
  1383  01E7  29F2               	goto	l1718
  1384  01E8                     l1712:	
  1385                           
  1386                           ;VC.c: 148:             {;VC.c: 149:                 Motor_speed = Min_speed;
  1387  01E8  308C               	movlw	140
  1388  01E9  00BA               	movwf	??_handling_switch_events
  1389  01EA  083A               	movf	??_handling_switch_events,w
  1390  01EB  00CC               	movwf	_Motor_speed
  1391                           
  1392                           ;VC.c: 150:                 break;
  1393  01EC  2A07               	goto	l1720
  1394  01ED                     l1714:	
  1395                           
  1396                           ;VC.c: 154:             {;VC.c: 155:                 Motor_speed = Mid_speed;
  1397  01ED  305A               	movlw	90
  1398  01EE  00BA               	movwf	??_handling_switch_events
  1399  01EF  083A               	movf	??_handling_switch_events,w
  1400  01F0  00CC               	movwf	_Motor_speed
  1401                           
  1402                           ;VC.c: 156:                 break;
  1403  01F1  2A07               	goto	l1720
  1404  01F2                     l1718:	
  1405  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1406  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1407  01F4  084C               	movf	_Motor_speed,w
  1408  01F5  00BA               	movwf	??_handling_switch_events
  1409  01F6  01BB               	clrf	??_handling_switch_events+1
  1410                           
  1411                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1412                           ; Switch size 1, requested type "simple"
  1413                           ; Number of cases is 1, Range of values is 0 to 0
  1414                           ; switch strategies available:
  1415                           ; Name         Instructions Cycles
  1416                           ; simple_byte            4     3 (average)
  1417                           ; direct_byte           11     8 (fixed)
  1418                           ; jumptable            260     6 (fixed)
  1419                           ;	Chosen strategy is simple_byte
  1420  01F7  083B               	movf	??_handling_switch_events+1,w
  1421  01F8  3A00               	xorlw	0	; case 0
  1422  01F9  1903               	skipnz
  1423  01FA  29FC               	goto	l2200
  1424  01FB  2A07               	goto	l1720
  1425  01FC                     l2200:	
  1426                           
  1427                           ; Switch size 1, requested type "simple"
  1428                           ; Number of cases is 3, Range of values is 10 to 140
  1429                           ; switch strategies available:
  1430                           ; Name         Instructions Cycles
  1431                           ; simple_byte           10     6 (average)
  1432                           ; jumptable            263     9 (fixed)
  1433                           ;	Chosen strategy is simple_byte
  1434  01FC  083A               	movf	??_handling_switch_events,w
  1435  01FD  3A0A               	xorlw	10	; case 10
  1436  01FE  1903               	skipnz
  1437  01FF  29ED               	goto	l1714
  1438  0200  3A50               	xorlw	80	; case 90
  1439  0201  1903               	skipnz
  1440  0202  29E8               	goto	l1712
  1441  0203  3AD6               	xorlw	214	; case 140
  1442  0204  1903               	skipnz
  1443  0205  2A07               	goto	l1720
  1444  0206  2A07               	goto	l1720
  1445  0207                     l1720:	
  1446                           
  1447                           ;VC.c: 168:      if(SW_GetState(SW_PRE) == (SW_PRESSED))
  1448  0207  3002               	movlw	2
  1449  0208  120A  118A  25D8  120A  118A  	fcall	_SW_GetState
  1450  020D  3A02               	xorlw	2
  1451  020E  1D03               	skipz
  1452  020F  2A11               	goto	u511
  1453  0210  2A12               	goto	u510
  1454  0211                     u511:	
  1455  0211  2A44               	goto	l1738
  1456  0212                     u510:	
  1457  0212                     l1722:	
  1458                           
  1459                           ;VC.c: 169:        {;VC.c: 173:                 PRESSURE_COUNTER += (20);
  1460  0212  3014               	movlw	20
  1461  0213  1283               	bcf	3,5	;RP0=0, select bank0
  1462  0214  1303               	bcf	3,6	;RP1=0, select bank0
  1463  0215  07AB               	addwf	_PRESSURE_COUNTER,f
  1464  0216  1803               	skipnc
  1465  0217  0AAC               	incf	_PRESSURE_COUNTER+1,f
  1466  0218  3000               	movlw	0
  1467  0219  07AC               	addwf	_PRESSURE_COUNTER+1,f
  1468  021A                     l1724:	
  1469                           
  1470                           ;VC.c: 176:              if(PRESSURE_COUNTER != (30000))
  1471  021A  3030               	movlw	48
  1472  021B  062B               	xorwf	_PRESSURE_COUNTER,w
  1473  021C  3075               	movlw	117
  1474  021D  1903               	skipnz
  1475  021E  062C               	xorwf	_PRESSURE_COUNTER+1,w
  1476  021F  1903               	btfsc	3,2
  1477  0220  2A22               	goto	u521
  1478  0221  2A23               	goto	u520
  1479  0222                     u521:	
  1480  0222  2A24               	goto	l1728
  1481  0223                     u520:	
  1482  0223  2A4D               	goto	l207
  1483  0224                     l1728:	
  1484                           
  1485                           ;VC.c: 181:               PRESSURE_COUNTER = 0;
  1486  0224  01AB               	clrf	_PRESSURE_COUNTER
  1487  0225  01AC               	clrf	_PRESSURE_COUNTER+1
  1488                           
  1489                           ;VC.c: 184:              switch(Motor_speed)
  1490  0226  2A31               	goto	l1736
  1491  0227                     l1730:	
  1492                           
  1493                           ;VC.c: 193:                  {;VC.c: 194:                      Motor_speed = Min_speed;
  1494  0227  308C               	movlw	140
  1495  0228  00BA               	movwf	??_handling_switch_events
  1496  0229  083A               	movf	??_handling_switch_events,w
  1497  022A  00CC               	movwf	_Motor_speed
  1498                           
  1499                           ;VC.c: 195:                      break;
  1500  022B  2A4D               	goto	l207
  1501  022C                     l1732:	
  1502                           
  1503                           ;VC.c: 199:                  {;VC.c: 200:                      Motor_speed = Mid_speed;
  1504  022C  305A               	movlw	90
  1505  022D  00BA               	movwf	??_handling_switch_events
  1506  022E  083A               	movf	??_handling_switch_events,w
  1507  022F  00CC               	movwf	_Motor_speed
  1508                           
  1509                           ;VC.c: 201:                      break;
  1510  0230  2A4D               	goto	l207
  1511  0231                     l1736:	
  1512  0231  084C               	movf	_Motor_speed,w
  1513  0232  00BA               	movwf	??_handling_switch_events
  1514  0233  01BB               	clrf	??_handling_switch_events+1
  1515                           
  1516                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1517                           ; Switch size 1, requested type "simple"
  1518                           ; Number of cases is 1, Range of values is 0 to 0
  1519                           ; switch strategies available:
  1520                           ; Name         Instructions Cycles
  1521                           ; simple_byte            4     3 (average)
  1522                           ; direct_byte           11     8 (fixed)
  1523                           ; jumptable            260     6 (fixed)
  1524                           ;	Chosen strategy is simple_byte
  1525  0234  083B               	movf	??_handling_switch_events+1,w
  1526  0235  3A00               	xorlw	0	; case 0
  1527  0236  1903               	skipnz
  1528  0237  2A39               	goto	l2202
  1529  0238  2A4D               	goto	l207
  1530  0239                     l2202:	
  1531                           
  1532                           ; Switch size 1, requested type "simple"
  1533                           ; Number of cases is 3, Range of values is 10 to 140
  1534                           ; switch strategies available:
  1535                           ; Name         Instructions Cycles
  1536                           ; simple_byte           10     6 (average)
  1537                           ; jumptable            263     9 (fixed)
  1538                           ;	Chosen strategy is simple_byte
  1539  0239  083A               	movf	??_handling_switch_events,w
  1540  023A  3A0A               	xorlw	10	; case 10
  1541  023B  1903               	skipnz
  1542  023C  2A2C               	goto	l1732
  1543  023D  3A50               	xorlw	80	; case 90
  1544  023E  1903               	skipnz
  1545  023F  2A27               	goto	l1730
  1546  0240  3AD6               	xorlw	214	; case 140
  1547  0241  1903               	skipnz
  1548  0242  2A4D               	goto	l207
  1549  0243  2A4D               	goto	l207
  1550  0244                     l1738:	
  1551                           
  1552                           ;VC.c: 214:      {;VC.c: 215:            PRESSURE_COUNTER = 0;
  1553  0244  1283               	bcf	3,5	;RP0=0, select bank0
  1554  0245  1303               	bcf	3,6	;RP1=0, select bank0
  1555  0246  01AB               	clrf	_PRESSURE_COUNTER
  1556  0247  01AC               	clrf	_PRESSURE_COUNTER+1
  1557  0248                     l1740:	
  1558                           
  1559                           ;VC.c: 217:            ((((TRISB))) = (((TRISB)) & (~(1 << (3))))|(0 << (3)));
  1560  0248  1683               	bsf	3,5	;RP0=1, select bank1
  1561  0249  1303               	bcf	3,6	;RP1=0, select bank1
  1562  024A  0806               	movf	6,w	;volatile
  1563  024B  39F7               	andlw	247
  1564  024C  0086               	movwf	6	;volatile
  1565  024D                     l207:	
  1566  024D  0008               	return
  1567  024E                     __end_of_handling_switch_events:	
  1568                           
  1569                           	psect	text3
  1570  05D8                     __ptext3:	
  1571 ;; *************** function _SW_GetState *****************
  1572 ;; Defined at:
  1573 ;;		line 54 in file "SW.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  sw              1    wreg     enum E854
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;  sw              1    5[BANK0 ] enum E854
  1578 ;; Return value:  Size  Location     Type
  1579 ;;                  1    wreg      enum E859
  1580 ;; Registers used:
  1581 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/0
  1584 ;;		On exit  : 0/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1587 ;;      Params:         0       0       0       0       0
  1588 ;;      Locals:         0       1       0       0       0
  1589 ;;      Temps:          0       1       0       0       0
  1590 ;;      Totals:         0       2       0       0       0
  1591 ;;Total ram usage:        2 bytes
  1592 ;; Hardware stack levels used:    1
  1593 ;; Hardware stack levels required when called:    5
  1594 ;; This function calls:
  1595 ;;		___bmul
  1596 ;; This function is called by:
  1597 ;;		_handling_switch_events
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           
  1602                           ;psect for function _SW_GetState
  1603  05D8                     _SW_GetState:	
  1604                           
  1605                           ;incstack = 0
  1606                           ; Regs used in _SW_GetState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1607                           ;SW_GetState@sw stored from wreg
  1608  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  1609  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  1610  05DA  00B9               	movwf	SW_GetState@sw
  1611  05DB                     l1630:	
  1612                           
  1613                           ;SW.c: 54: tSW_State SW_GetState(tSW sw);SW.c: 55: {;SW.c: 58:     return SWs_Info[sw].s
      +                          w_state;
  1614  05DB  3003               	movlw	3
  1615  05DC  00B8               	movwf	??_SW_GetState
  1616  05DD  0838               	movf	??_SW_GetState,w
  1617  05DE  00B4               	movwf	___bmul@multiplicand
  1618  05DF  0839               	movf	SW_GetState@sw,w
  1619  05E0  120A  118A  25AE  120A  118A  	fcall	___bmul
  1620  05E5  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1621  05E6  0084               	movwf	4
  1622  05E7  1383               	bcf	3,7	;select IRP bank0
  1623  05E8  0800               	movf	0,w
  1624  05E9                     l66:	
  1625  05E9  0008               	return
  1626  05EA                     __end_of_SW_GetState:	
  1627                           
  1628                           	psect	text4
  1629  05EA                     __ptext4:	
  1630 ;; *************** function _MOT_SetTargetAngle *****************
  1631 ;; Defined at:
  1632 ;;		line 160 in file "Motor.c"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;  M               1    wreg     enum E850
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;  M               1    1[BANK0 ] enum E850
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  1    wreg      void 
  1639 ;; Registers used:
  1640 ;;		wreg
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1646 ;;      Params:         0       0       0       0       0
  1647 ;;      Locals:         0       1       0       0       0
  1648 ;;      Temps:          0       1       0       0       0
  1649 ;;      Totals:         0       2       0       0       0
  1650 ;;Total ram usage:        2 bytes
  1651 ;; Hardware stack levels used:    1
  1652 ;; Hardware stack levels required when called:    4
  1653 ;; This function calls:
  1654 ;;		Nothing
  1655 ;; This function is called by:
  1656 ;;		_VC_update
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           
  1661                           ;psect for function _MOT_SetTargetAngle
  1662  05EA                     _MOT_SetTargetAngle:	
  1663                           
  1664                           ;incstack = 0
  1665                           ; Regs used in _MOT_SetTargetAngle: [wreg]
  1666                           ;MOT_SetTargetAngle@M stored from wreg
  1667  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  1668  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  1669  05EC  00B5               	movwf	MOT_SetTargetAngle@M
  1670  05ED                     l1754:	
  1671                           
  1672                           ;Motor.c: 160: void MOT_SetTargetAngle(tVC_Motor_speed M);Motor.c: 161: {;Motor.c: 167: 
      +                              if(Target_firing_angle == M)
  1673  05ED  084A               	movf	_Target_firing_angle,w
  1674  05EE  0635               	xorwf	MOT_SetTargetAngle@M,w
  1675  05EF  1D03               	skipz
  1676  05F0  2DF2               	goto	u531
  1677  05F1  2DF3               	goto	u530
  1678  05F2                     u531:	
  1679  05F2  2DF4               	goto	l273
  1680  05F3                     u530:	
  1681  05F3  2DFA               	goto	l274
  1682  05F4                     l273:	
  1683                           ;Motor.c: 170:     }
  1684                           
  1685                           
  1686                           ;Motor.c: 175:     motor_state = Mot_Switching_state;
  1687  05F4  01C9               	clrf	_motor_state
  1688  05F5  0AC9               	incf	_motor_state,f
  1689  05F6                     l1758:	
  1690                           
  1691                           ;Motor.c: 176:     Target_firing_angle = M;
  1692  05F6  0835               	movf	MOT_SetTargetAngle@M,w
  1693  05F7  00B4               	movwf	??_MOT_SetTargetAngle
  1694  05F8  0834               	movf	??_MOT_SetTargetAngle,w
  1695  05F9  00CA               	movwf	_Target_firing_angle
  1696  05FA                     l274:	
  1697  05FA  0008               	return
  1698  05FB                     __end_of_MOT_SetTargetAngle:	
  1699                           
  1700                           	psect	text5
  1701  055F                     __ptext5:	
  1702 ;; *************** function _VC_Init *****************
  1703 ;; Defined at:
  1704 ;;		line 35 in file "VC.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  speed           1    wreg     enum E850
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  speed           1    3[BANK0 ] enum E850
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0, pclath, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1718 ;;      Params:         0       0       0       0       0
  1719 ;;      Locals:         0       1       0       0       0
  1720 ;;      Temps:          0       1       0       0       0
  1721 ;;      Totals:         0       2       0       0       0
  1722 ;;Total ram usage:        2 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    5
  1725 ;; This function calls:
  1726 ;;		_MOT_Init
  1727 ;; This function is called by:
  1728 ;;		_main
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           
  1733                           ;psect for function _VC_Init
  1734  055F                     _VC_Init:	
  1735                           
  1736                           ;incstack = 0
  1737                           ; Regs used in _VC_Init: [wreg+status,2+status,0+pclath+cstack]
  1738                           ;VC_Init@speed stored from wreg
  1739  055F  1283               	bcf	3,5	;RP0=0, select bank0
  1740  0560  1303               	bcf	3,6	;RP1=0, select bank0
  1741  0561  00B7               	movwf	VC_Init@speed
  1742  0562                     l1778:	
  1743                           
  1744                           ;VC.c: 35: void VC_Init(tVC_Motor_speed speed);VC.c: 36: {;VC.c: 39:     Motor_speed = s
      +                          peed;
  1745  0562  0837               	movf	VC_Init@speed,w
  1746  0563  00B6               	movwf	??_VC_Init
  1747  0564  0836               	movf	??_VC_Init,w
  1748  0565  00CC               	movwf	_Motor_speed
  1749  0566                     l1780:	
  1750                           
  1751                           ;VC.c: 42:     MOT_Init(speed);
  1752  0566  0837               	movf	VC_Init@speed,w
  1753  0567  120A  118A  2595  120A  118A  	fcall	_MOT_Init
  1754  056C                     l1782:	
  1755                           
  1756                           ;VC.c: 45:     ((((PORTB))) = (((PORTB)) & (~(1 << (3))))|((0) << (3)));
  1757  056C  1283               	bcf	3,5	;RP0=0, select bank0
  1758  056D  1303               	bcf	3,6	;RP1=0, select bank0
  1759  056E  0806               	movf	6,w	;volatile
  1760  056F  39F7               	andlw	247
  1761  0570  0086               	movwf	6	;volatile
  1762  0571                     l1784:	
  1763                           
  1764                           ;VC.c: 46:     ((((TRISB))) = (((TRISB)) & (~(1 << (3))))|(0 << (3)));
  1765  0571  1683               	bsf	3,5	;RP0=1, select bank1
  1766  0572  1303               	bcf	3,6	;RP1=0, select bank1
  1767  0573  0806               	movf	6,w	;volatile
  1768  0574  39F7               	andlw	247
  1769  0575  0086               	movwf	6	;volatile
  1770  0576                     l1786:	
  1771                           
  1772                           ;VC.c: 48:     PRESSURE_COUNTER = 0;
  1773  0576  1283               	bcf	3,5	;RP0=0, select bank0
  1774  0577  1303               	bcf	3,6	;RP1=0, select bank0
  1775  0578  01AB               	clrf	_PRESSURE_COUNTER
  1776  0579  01AC               	clrf	_PRESSURE_COUNTER+1
  1777  057A                     l179:	
  1778  057A  0008               	return
  1779  057B                     __end_of_VC_Init:	
  1780                           
  1781                           	psect	text6
  1782  0595                     __ptext6:	
  1783 ;; *************** function _MOT_Init *****************
  1784 ;; Defined at:
  1785 ;;		line 48 in file "Motor.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  M               1    wreg     enum E850
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  M               1    1[BANK0 ] enum E850
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, status,2
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1799 ;;      Params:         0       0       0       0       0
  1800 ;;      Locals:         0       1       0       0       0
  1801 ;;      Temps:          0       1       0       0       0
  1802 ;;      Totals:         0       2       0       0       0
  1803 ;;Total ram usage:        2 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    4
  1806 ;; This function calls:
  1807 ;;		Nothing
  1808 ;; This function is called by:
  1809 ;;		_VC_Init
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           
  1814                           ;psect for function _MOT_Init
  1815  0595                     _MOT_Init:	
  1816                           
  1817                           ;incstack = 0
  1818                           ; Regs used in _MOT_Init: [wreg+status,2]
  1819                           ;MOT_Init@M stored from wreg
  1820  0595  1283               	bcf	3,5	;RP0=0, select bank0
  1821  0596  1303               	bcf	3,6	;RP1=0, select bank0
  1822  0597  00B5               	movwf	MOT_Init@M
  1823  0598                     l1686:	
  1824                           
  1825                           ;Motor.c: 48: void MOT_Init(tVC_Motor_speed M);Motor.c: 49: {;Motor.c: 52:     ((((PORTC
      +                          ))) = (((PORTC)) & (~(1 << ((3)))))|((0) << ((3))));
  1826  0598  0807               	movf	7,w	;volatile
  1827  0599  39F7               	andlw	247
  1828  059A  0087               	movwf	7	;volatile
  1829                           
  1830                           ;Motor.c: 53:     ((((TRISC))) = (((TRISC)) & (~(1 << ((3)))))|(0 << ((3))));
  1831  059B  1683               	bsf	3,5	;RP0=1, select bank1
  1832  059C  1303               	bcf	3,6	;RP1=0, select bank1
  1833  059D  0807               	movf	7,w	;volatile
  1834  059E  39F7               	andlw	247
  1835  059F  0087               	movwf	7	;volatile
  1836  05A0                     l1688:	
  1837                           
  1838                           ;Motor.c: 57:     Actual_angle = (170);
  1839  05A0  30AA               	movlw	170
  1840  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  1841  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  1842  05A3  00B4               	movwf	??_MOT_Init
  1843  05A4  0834               	movf	??_MOT_Init,w
  1844  05A5  00CB               	movwf	_Actual_angle
  1845  05A6                     l1690:	
  1846                           
  1847                           ;Motor.c: 60:     Target_firing_angle = M;
  1848  05A6  0835               	movf	MOT_Init@M,w
  1849  05A7  00B4               	movwf	??_MOT_Init
  1850  05A8  0834               	movf	??_MOT_Init,w
  1851  05A9  00CA               	movwf	_Target_firing_angle
  1852  05AA                     l1692:	
  1853                           
  1854                           ;Motor.c: 63:     motor_state = Mot_Switching_state;
  1855  05AA  01C9               	clrf	_motor_state
  1856  05AB  0AC9               	incf	_motor_state,f
  1857  05AC                     l1694:	
  1858                           
  1859                           ;Motor.c: 66:     Switching_Counter = 0;
  1860  05AC  01FC               	clrf	_Switching_Counter
  1861  05AD                     l252:	
  1862  05AD  0008               	return
  1863  05AE                     __end_of_MOT_Init:	
  1864                           
  1865                           	psect	text7
  1866  063D                     __ptext7:	
  1867 ;; *************** function _TMR1_Init *****************
  1868 ;; Defined at:
  1869 ;;		line 16 in file "TIMER1.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;		None
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;		None
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  1    wreg      void 
  1876 ;; Registers used:
  1877 ;;		None
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1883 ;;      Params:         0       0       0       0       0
  1884 ;;      Locals:         0       0       0       0       0
  1885 ;;      Temps:          0       0       0       0       0
  1886 ;;      Totals:         0       0       0       0       0
  1887 ;;Total ram usage:        0 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    4
  1890 ;; This function calls:
  1891 ;;		Nothing
  1892 ;; This function is called by:
  1893 ;;		_main
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           
  1898                           ;psect for function _TMR1_Init
  1899  063D                     _TMR1_Init:	
  1900  063D                     l1800:	
  1901                           ;incstack = 0
  1902                           ; Regs used in _TMR1_Init: []
  1903                           
  1904                           
  1905                           ;TIMER1.c: 19:     T1CKPS1 = 0; T1CKPS0 = 1;
  1906  063D  1283               	bcf	3,5	;RP0=0, select bank0
  1907  063E  1303               	bcf	3,6	;RP1=0, select bank0
  1908  063F  1290               	bcf	16,5	;volatile
  1909  0640  1610               	bsf	16,4	;volatile
  1910                           
  1911                           ;TIMER1.c: 22:     (T1OSCEN = 0);
  1912  0641  1190               	bcf	16,3	;volatile
  1913                           
  1914                           ;TIMER1.c: 24:     (TMR1CS = 0);
  1915  0642  1090               	bcf	16,1	;volatile
  1916                           
  1917                           ;TIMER1.c: 26:     (TMR1ON = 0);
  1918  0643  1010               	bcf	16,0	;volatile
  1919  0644                     l342:	
  1920  0644  0008               	return
  1921  0645                     __end_of_TMR1_Init:	
  1922                           
  1923                           	psect	text8
  1924  0618                     __ptext8:	
  1925 ;; *************** function _TMR0_Start *****************
  1926 ;; Defined at:
  1927 ;;		line 23 in file "Timer.c"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;		None
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;		None
  1932 ;; Return value:  Size  Location     Type
  1933 ;;                  1    wreg      void 
  1934 ;; Registers used:
  1935 ;;		wreg
  1936 ;; Tracked objects:
  1937 ;;		On entry : 0/0
  1938 ;;		On exit  : 0/0
  1939 ;;		Unchanged: 0/0
  1940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1941 ;;      Params:         0       0       0       0       0
  1942 ;;      Locals:         0       0       0       0       0
  1943 ;;      Temps:          0       0       0       0       0
  1944 ;;      Totals:         0       0       0       0       0
  1945 ;;Total ram usage:        0 bytes
  1946 ;; Hardware stack levels used:    1
  1947 ;; Hardware stack levels required when called:    4
  1948 ;; This function calls:
  1949 ;;		Nothing
  1950 ;; This function is called by:
  1951 ;;		_main
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           
  1956                           ;psect for function _TMR0_Start
  1957  0618                     _TMR0_Start:	
  1958  0618                     l1790:	
  1959                           ;incstack = 0
  1960                           ; Regs used in _TMR0_Start: [wreg]
  1961                           
  1962                           
  1963                           ;Timer.c: 26:  (TMR0IF = 0);
  1964  0618  110B               	bcf	11,2	;volatile
  1965  0619                     l1792:	
  1966                           
  1967                           ;Timer.c: 28:  (TMR0 = 256 - ((78)));
  1968  0619  30B2               	movlw	178
  1969  061A  1283               	bcf	3,5	;RP0=0, select bank0
  1970  061B  1303               	bcf	3,6	;RP1=0, select bank0
  1971  061C  0081               	movwf	1	;volatile
  1972  061D                     l1794:	
  1973                           
  1974                           ;Timer.c: 30:  (TMR0IE = 1);
  1975  061D  168B               	bsf	11,5	;volatile
  1976  061E                     l1796:	
  1977                           
  1978                           ;Timer.c: 31:  (GIE = 1);
  1979  061E  178B               	bsf	11,7	;volatile
  1980  061F                     l1798:	
  1981                           
  1982                           ;Timer.c: 33:  (T0CS = 0);
  1983  061F  1683               	bsf	3,5	;RP0=1, select bank1
  1984  0620  1303               	bcf	3,6	;RP1=0, select bank1
  1985  0621  1281               	bcf	1,5	;volatile
  1986  0622                     l310:	
  1987  0622  0008               	return
  1988  0623                     __end_of_TMR0_Start:	
  1989                           
  1990                           	psect	text9
  1991  0645                     __ptext9:	
  1992 ;; *************** function _TMR0_Init *****************
  1993 ;; Defined at:
  1994 ;;		line 13 in file "Timer.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;		None
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;		None
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      void 
  2001 ;; Registers used:
  2002 ;;		None
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2008 ;;      Params:         0       0       0       0       0
  2009 ;;      Locals:         0       0       0       0       0
  2010 ;;      Temps:          0       0       0       0       0
  2011 ;;      Totals:         0       0       0       0       0
  2012 ;;Total ram usage:        0 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:    4
  2015 ;; This function calls:
  2016 ;;		Nothing
  2017 ;; This function is called by:
  2018 ;;		_main
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           
  2023                           ;psect for function _TMR0_Init
  2024  0645                     _TMR0_Init:	
  2025  0645                     l1788:	
  2026                           ;incstack = 0
  2027                           ; Regs used in _TMR0_Init: []
  2028                           
  2029                           
  2030                           ;Timer.c: 16:  PS2 = 1; PS1 = 1; PS0 = 1; PSA = 0;
  2031  0645  1683               	bsf	3,5	;RP0=1, select bank1
  2032  0646  1303               	bcf	3,6	;RP1=0, select bank1
  2033  0647  1501               	bsf	1,2	;volatile
  2034  0648  1481               	bsf	1,1	;volatile
  2035  0649  1401               	bsf	1,0	;volatile
  2036  064A  1181               	bcf	1,3	;volatile
  2037                           
  2038                           ;Timer.c: 19:  (T0CS = 1);
  2039  064B  1681               	bsf	1,5	;volatile
  2040  064C                     l307:	
  2041  064C  0008               	return
  2042  064D                     __end_of_TMR0_Init:	
  2043                           
  2044                           	psect	text10
  2045  0030                     __ptext10:	
  2046 ;; *************** function _SW_Update *****************
  2047 ;; Defined at:
  2048 ;;		line 63 in file "SW.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;		None
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;  index           1    7[BANK0 ] unsigned char 
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  1    wreg      void 
  2055 ;; Registers used:
  2056 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2062 ;;      Params:         0       0       0       0       0
  2063 ;;      Locals:         0       1       0       0       0
  2064 ;;      Temps:          0       3       0       0       0
  2065 ;;      Totals:         0       4       0       0       0
  2066 ;;Total ram usage:        4 bytes
  2067 ;; Hardware stack levels used:    1
  2068 ;; Hardware stack levels required when called:    5
  2069 ;; This function calls:
  2070 ;;		___bmul
  2071 ;; This function is called by:
  2072 ;;		_main
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           
  2077                           ;psect for function _SW_Update
  2078  0030                     _SW_Update:	
  2079  0030                     l1840:	
  2080                           ;incstack = 0
  2081                           ; Regs used in _SW_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2082                           
  2083  0030                     l1842:	
  2084                           
  2085                           ;SW.c: 69:     SW_counter += (10);
  2086  0030  300A               	movlw	10
  2087  0031  1283               	bcf	3,5	;RP0=0, select bank0
  2088  0032  1303               	bcf	3,6	;RP1=0, select bank0
  2089  0033  07AF               	addwf	SW_Update@SW_counter,f
  2090  0034  1803               	skipnc
  2091  0035  0AB0               	incf	SW_Update@SW_counter+1,f
  2092  0036  3000               	movlw	0
  2093  0037  07B0               	addwf	SW_Update@SW_counter+1,f
  2094  0038                     l1844:	
  2095                           
  2096                           ;SW.c: 71:     if (SW_counter != (20)){
  2097  0038  3014               	movlw	20
  2098  0039  062F               	xorwf	SW_Update@SW_counter,w
  2099  003A  0430               	iorwf	SW_Update@SW_counter+1,w
  2100  003B  1903               	btfsc	3,2
  2101  003C  283E               	goto	u571
  2102  003D  283F               	goto	u570
  2103  003E                     u571:	
  2104  003E  2840               	goto	l1848
  2105  003F                     u570:	
  2106  003F  29B0               	goto	l72
  2107  0040                     l1848:	
  2108                           
  2109                           ;SW.c: 75:     SW_counter = 0;
  2110  0040  01AF               	clrf	SW_Update@SW_counter
  2111  0041  01B0               	clrf	SW_Update@SW_counter+1
  2112                           
  2113                           ;SW.c: 78:     for (index = SW_PLUS; index < (3); index++)
  2114  0042  01BB               	clrf	SW_Update@index
  2115  0043                     l1854:	
  2116                           
  2117                           ;SW.c: 79:     {;SW.c: 82:         SWs_Info[index].sw_samples[0] = SWs_Info[index].sw_sa
      +                          mples[1];
  2118  0043  3003               	movlw	3
  2119  0044  00B8               	movwf	??_SW_Update
  2120  0045  0838               	movf	??_SW_Update,w
  2121  0046  00B4               	movwf	___bmul@multiplicand
  2122  0047  083B               	movf	SW_Update@index,w
  2123  0048  120A  118A  25AE  120A  118A  	fcall	___bmul
  2124  004D  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  2125  004E  0084               	movwf	4
  2126  004F  1383               	bcf	3,7	;select IRP bank0
  2127  0050  0800               	movf	0,w
  2128  0051  1283               	bcf	3,5	;RP0=0, select bank0
  2129  0052  1303               	bcf	3,6	;RP1=0, select bank0
  2130  0053  00B9               	movwf	??_SW_Update+1
  2131  0054  3003               	movlw	3
  2132  0055  00BA               	movwf	??_SW_Update+2
  2133  0056  083A               	movf	??_SW_Update+2,w
  2134  0057  00B4               	movwf	___bmul@multiplicand
  2135  0058  083B               	movf	SW_Update@index,w
  2136  0059  120A  118A  25AE  120A  118A  	fcall	___bmul
  2137  005E  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
  2138  005F  0084               	movwf	4
  2139  0060  1283               	bcf	3,5	;RP0=0, select bank0
  2140  0061  1303               	bcf	3,6	;RP1=0, select bank0
  2141  0062  0839               	movf	??_SW_Update+1,w
  2142  0063  1383               	bcf	3,7	;select IRP bank0
  2143  0064  0080               	movwf	0
  2144  0065                     l1856:	
  2145                           
  2146                           ;SW.c: 84:         if (index == SW_PLUS)
  2147  0065  083B               	movf	SW_Update@index,w
  2148  0066  1D03               	btfss	3,2
  2149  0067  2869               	goto	u581
  2150  0068  286A               	goto	u580
  2151  0069                     u581:	
  2152  0069  287F               	goto	l1860
  2153  006A                     u580:	
  2154  006A                     l1858:	
  2155                           
  2156                           ;SW.c: 85:         {;SW.c: 86:             SWs_Info[index].sw_samples[1] = (((((PORTB)))
      +                           & (1 << ((0)))) >> (((0))));
  2157  006A  0806               	movf	6,w	;volatile
  2158  006B  3901               	andlw	1
  2159  006C  00B8               	movwf	??_SW_Update
  2160  006D  3003               	movlw	3
  2161  006E  00B9               	movwf	??_SW_Update+1
  2162  006F  0839               	movf	??_SW_Update+1,w
  2163  0070  00B4               	movwf	___bmul@multiplicand
  2164  0071  083B               	movf	SW_Update@index,w
  2165  0072  120A  118A  25AE  120A  118A  	fcall	___bmul
  2166  0077  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  2167  0078  0084               	movwf	4
  2168  0079  1283               	bcf	3,5	;RP0=0, select bank0
  2169  007A  1303               	bcf	3,6	;RP1=0, select bank0
  2170  007B  0838               	movf	??_SW_Update,w
  2171  007C  1383               	bcf	3,7	;select IRP bank0
  2172  007D  0080               	movwf	0
  2173                           
  2174                           ;SW.c: 87:         } else if (index == SW_MINUS)
  2175  007E  297F               	goto	l1890
  2176  007F                     l1860:	
  2177  007F  033B               	decf	SW_Update@index,w
  2178  0080  1D03               	btfss	3,2
  2179  0081  2883               	goto	u591
  2180  0082  2884               	goto	u590
  2181  0083                     u591:	
  2182  0083  289C               	goto	l1864
  2183  0084                     u590:	
  2184  0084                     l1862:	
  2185                           
  2186                           ;SW.c: 88:         {;SW.c: 89:             SWs_Info[index].sw_samples[1] = (((((PORTB)))
      +                           & (1 << ((1)))) >> (((1))));
  2187  0084  0806               	movf	6,w	;volatile
  2188  0085  00B8               	movwf	??_SW_Update
  2189  0086  1003               	clrc
  2190  0087  0C38               	rrf	??_SW_Update,w
  2191  0088  3901               	andlw	1
  2192  0089  00B9               	movwf	??_SW_Update+1
  2193  008A  3003               	movlw	3
  2194  008B  00BA               	movwf	??_SW_Update+2
  2195  008C  083A               	movf	??_SW_Update+2,w
  2196  008D  00B4               	movwf	___bmul@multiplicand
  2197  008E  083B               	movf	SW_Update@index,w
  2198  008F  120A  118A  25AE  120A  118A  	fcall	___bmul
  2199  0094  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  2200  0095  0084               	movwf	4
  2201  0096  1283               	bcf	3,5	;RP0=0, select bank0
  2202  0097  1303               	bcf	3,6	;RP1=0, select bank0
  2203  0098  0839               	movf	??_SW_Update+1,w
  2204  0099  1383               	bcf	3,7	;select IRP bank0
  2205  009A  0080               	movwf	0
  2206                           
  2207                           ;SW.c: 90:         } else if (index == SW_PRE)
  2208  009B  297F               	goto	l1890
  2209  009C                     l1864:	
  2210  009C  3002               	movlw	2
  2211  009D  063B               	xorwf	SW_Update@index,w
  2212  009E  1D03               	btfss	3,2
  2213  009F  28A1               	goto	u601
  2214  00A0  28A2               	goto	u600
  2215  00A1                     u601:	
  2216  00A1  28BF               	goto	l76
  2217  00A2                     u600:	
  2218  00A2                     l1866:	
  2219                           
  2220                           ;SW.c: 91:         {;SW.c: 92:             SWs_Info[index].sw_samples[1] = (((((PORTB)))
      +                           & (1 << ((2)))) >> (((2))));
  2221  00A2  0806               	movf	6,w	;volatile
  2222  00A3  00B8               	movwf	??_SW_Update
  2223  00A4  3002               	movlw	2
  2224  00A5                     u615:	
  2225  00A5  1003               	clrc
  2226  00A6  0CB8               	rrf	??_SW_Update,f
  2227  00A7  3EFF               	addlw	-1
  2228  00A8  1D03               	skipz
  2229  00A9  28A5               	goto	u615
  2230  00AA  0838               	movf	??_SW_Update,w
  2231  00AB  3901               	andlw	1
  2232  00AC  00B9               	movwf	??_SW_Update+1
  2233  00AD  3003               	movlw	3
  2234  00AE  00BA               	movwf	??_SW_Update+2
  2235  00AF  083A               	movf	??_SW_Update+2,w
  2236  00B0  00B4               	movwf	___bmul@multiplicand
  2237  00B1  083B               	movf	SW_Update@index,w
  2238  00B2  120A  118A  25AE  120A  118A  	fcall	___bmul
  2239  00B7  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  2240  00B8  0084               	movwf	4
  2241  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  2242  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  2243  00BB  0839               	movf	??_SW_Update+1,w
  2244  00BC  1383               	bcf	3,7	;select IRP bank0
  2245  00BD  0080               	movwf	0
  2246                           
  2247                           ;SW.c: 93:         } else
  2248  00BE  297F               	goto	l1890
  2249  00BF                     l76:	
  2250                           
  2251                           ;SW.c: 101:         switch(SWs_Info[index].sw_state)
  2252  00BF  297F               	goto	l1890
  2253  00C0                     l1868:	
  2254                           
  2255                           ;SW.c: 106:                 if ((SWs_Info[index].sw_samples[0] == (0)) &&
  2256  00C0  3003               	movlw	3
  2257  00C1  00B8               	movwf	??_SW_Update
  2258  00C2  0838               	movf	??_SW_Update,w
  2259  00C3  00B4               	movwf	___bmul@multiplicand
  2260  00C4  083B               	movf	SW_Update@index,w
  2261  00C5  120A  118A  25AE  120A  118A  	fcall	___bmul
  2262  00CA  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
  2263  00CB  0084               	movwf	4
  2264  00CC  1383               	bcf	3,7	;select IRP bank0
  2265  00CD  0800               	movf	0,w
  2266  00CE  1D03               	btfss	3,2
  2267  00CF  28D1               	goto	u621
  2268  00D0  28D2               	goto	u620
  2269  00D1                     u621:	
  2270  00D1  29A4               	goto	l1892
  2271  00D2                     u620:	
  2272  00D2                     l1870:	
  2273  00D2  3003               	movlw	3
  2274  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  2275  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  2276  00D5  00B8               	movwf	??_SW_Update
  2277  00D6  0838               	movf	??_SW_Update,w
  2278  00D7  00B4               	movwf	___bmul@multiplicand
  2279  00D8  083B               	movf	SW_Update@index,w
  2280  00D9  120A  118A  25AE  120A  118A  	fcall	___bmul
  2281  00DE  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  2282  00DF  0084               	movwf	4
  2283  00E0  1383               	bcf	3,7	;select IRP bank0
  2284  00E1  0800               	movf	0,w
  2285  00E2  1D03               	btfss	3,2
  2286  00E3  28E5               	goto	u631
  2287  00E4  28E6               	goto	u630
  2288  00E5                     u631:	
  2289  00E5  29A4               	goto	l1892
  2290  00E6                     u630:	
  2291  00E6                     l1872:	
  2292                           
  2293                           ;SW.c: 108:                 {;SW.c: 109:                     SWs_Info[index].sw_state = 
      +                          SW_PRE_PRESSED;
  2294  00E6  3003               	movlw	3
  2295  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  2296  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  2297  00E9  00B8               	movwf	??_SW_Update
  2298  00EA  0838               	movf	??_SW_Update,w
  2299  00EB  00B4               	movwf	___bmul@multiplicand
  2300  00EC  083B               	movf	SW_Update@index,w
  2301  00ED  120A  118A  25AE  120A  118A  	fcall	___bmul
  2302  00F2  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  2303  00F3  0084               	movwf	4
  2304  00F4  1383               	bcf	3,7	;select IRP bank0
  2305  00F5  0180               	clrf	0
  2306  00F6  0A80               	incf	0,f
  2307                           
  2308                           ;SW.c: 110:                 } else
  2309  00F7  29A4               	goto	l1892
  2310  00F8                     l1874:	
  2311                           
  2312                           ;SW.c: 117:                 if (SWs_Info[index].sw_samples[1] == (0))
  2313  00F8  3003               	movlw	3
  2314  00F9  00B8               	movwf	??_SW_Update
  2315  00FA  0838               	movf	??_SW_Update,w
  2316  00FB  00B4               	movwf	___bmul@multiplicand
  2317  00FC  083B               	movf	SW_Update@index,w
  2318  00FD  120A  118A  25AE  120A  118A  	fcall	___bmul
  2319  0102  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  2320  0103  0084               	movwf	4
  2321  0104  1383               	bcf	3,7	;select IRP bank0
  2322  0105  0800               	movf	0,w
  2323  0106  1D03               	btfss	3,2
  2324  0107  2909               	goto	u641
  2325  0108  290A               	goto	u640
  2326  0109                     u641:	
  2327  0109  29A4               	goto	l1892
  2328  010A                     u640:	
  2329  010A                     l1876:	
  2330                           
  2331                           ;SW.c: 118:                 {;SW.c: 119:                     SWs_Info[index].sw_state = 
      +                          SW_PRESSED;
  2332  010A  3002               	movlw	2
  2333  010B  1283               	bcf	3,5	;RP0=0, select bank0
  2334  010C  1303               	bcf	3,6	;RP1=0, select bank0
  2335  010D  00B8               	movwf	??_SW_Update
  2336  010E  3003               	movlw	3
  2337  010F  00B9               	movwf	??_SW_Update+1
  2338  0110  0839               	movf	??_SW_Update+1,w
  2339  0111  00B4               	movwf	___bmul@multiplicand
  2340  0112  083B               	movf	SW_Update@index,w
  2341  0113  120A  118A  25AE  120A  118A  	fcall	___bmul
  2342  0118  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  2343  0119  0084               	movwf	4
  2344  011A  1283               	bcf	3,5	;RP0=0, select bank0
  2345  011B  1303               	bcf	3,6	;RP1=0, select bank0
  2346  011C  0838               	movf	??_SW_Update,w
  2347  011D  1383               	bcf	3,7	;select IRP bank0
  2348  011E  0080               	movwf	0
  2349                           
  2350                           ;SW.c: 120:                 } else
  2351  011F  29A4               	goto	l1892
  2352  0120                     l1878:	
  2353                           
  2354                           ;SW.c: 127:                 if ((SWs_Info[index].sw_samples[0] == (1)) &&
  2355  0120  3003               	movlw	3
  2356  0121  00B8               	movwf	??_SW_Update
  2357  0122  0838               	movf	??_SW_Update,w
  2358  0123  00B4               	movwf	___bmul@multiplicand
  2359  0124  083B               	movf	SW_Update@index,w
  2360  0125  120A  118A  25AE  120A  118A  	fcall	___bmul
  2361  012A  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
  2362  012B  0084               	movwf	4
  2363  012C  1383               	bcf	3,7	;select IRP bank0
  2364  012D  0300               	decf	0,w
  2365  012E  1D03               	btfss	3,2
  2366  012F  2931               	goto	u651
  2367  0130  2932               	goto	u650
  2368  0131                     u651:	
  2369  0131  29A4               	goto	l1892
  2370  0132                     u650:	
  2371  0132                     l1880:	
  2372  0132  3003               	movlw	3
  2373  0133  1283               	bcf	3,5	;RP0=0, select bank0
  2374  0134  1303               	bcf	3,6	;RP1=0, select bank0
  2375  0135  00B8               	movwf	??_SW_Update
  2376  0136  0838               	movf	??_SW_Update,w
  2377  0137  00B4               	movwf	___bmul@multiplicand
  2378  0138  083B               	movf	SW_Update@index,w
  2379  0139  120A  118A  25AE  120A  118A  	fcall	___bmul
  2380  013E  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  2381  013F  0084               	movwf	4
  2382  0140  1383               	bcf	3,7	;select IRP bank0
  2383  0141  0300               	decf	0,w
  2384  0142  1D03               	btfss	3,2
  2385  0143  2945               	goto	u661
  2386  0144  2946               	goto	u660
  2387  0145                     u661:	
  2388  0145  29A4               	goto	l1892
  2389  0146                     u660:	
  2390  0146                     l1882:	
  2391                           
  2392                           ;SW.c: 129:                 {;SW.c: 130:                     SWs_Info[index].sw_state = 
      +                          SW_PRE_RELEASED;
  2393  0146  3003               	movlw	3
  2394  0147  1283               	bcf	3,5	;RP0=0, select bank0
  2395  0148  1303               	bcf	3,6	;RP1=0, select bank0
  2396  0149  00B8               	movwf	??_SW_Update
  2397  014A  3003               	movlw	3
  2398  014B  00B9               	movwf	??_SW_Update+1
  2399  014C  0839               	movf	??_SW_Update+1,w
  2400  014D  00B4               	movwf	___bmul@multiplicand
  2401  014E  083B               	movf	SW_Update@index,w
  2402  014F  120A  118A  25AE  120A  118A  	fcall	___bmul
  2403  0154  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  2404  0155  0084               	movwf	4
  2405  0156  1283               	bcf	3,5	;RP0=0, select bank0
  2406  0157  1303               	bcf	3,6	;RP1=0, select bank0
  2407  0158  0838               	movf	??_SW_Update,w
  2408  0159  1383               	bcf	3,7	;select IRP bank0
  2409  015A  0080               	movwf	0
  2410                           
  2411                           ;SW.c: 131:                 }
  2412  015B  29A4               	goto	l1892
  2413  015C                     l1884:	
  2414                           
  2415                           ;SW.c: 139:                 if (SWs_Info[index].sw_samples[1] == (1))
  2416  015C  3003               	movlw	3
  2417  015D  00B8               	movwf	??_SW_Update
  2418  015E  0838               	movf	??_SW_Update,w
  2419  015F  00B4               	movwf	___bmul@multiplicand
  2420  0160  083B               	movf	SW_Update@index,w
  2421  0161  120A  118A  25AE  120A  118A  	fcall	___bmul
  2422  0166  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  2423  0167  0084               	movwf	4
  2424  0168  1383               	bcf	3,7	;select IRP bank0
  2425  0169  0300               	decf	0,w
  2426  016A  1D03               	btfss	3,2
  2427  016B  296D               	goto	u671
  2428  016C  296E               	goto	u670
  2429  016D                     u671:	
  2430  016D  29A4               	goto	l1892
  2431  016E                     u670:	
  2432  016E                     l1886:	
  2433                           
  2434                           ;SW.c: 140:                 {;SW.c: 141:                     SWs_Info[index].sw_state = 
      +                          SW_RELEASED;
  2435  016E  3003               	movlw	3
  2436  016F  1283               	bcf	3,5	;RP0=0, select bank0
  2437  0170  1303               	bcf	3,6	;RP1=0, select bank0
  2438  0171  00B8               	movwf	??_SW_Update
  2439  0172  0838               	movf	??_SW_Update,w
  2440  0173  00B4               	movwf	___bmul@multiplicand
  2441  0174  083B               	movf	SW_Update@index,w
  2442  0175  120A  118A  25AE  120A  118A  	fcall	___bmul
  2443  017A  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  2444  017B  0084               	movwf	4
  2445  017C  1383               	bcf	3,7	;select IRP bank0
  2446  017D  0180               	clrf	0
  2447                           
  2448                           ;SW.c: 142:                 } else
  2449  017E  29A4               	goto	l1892
  2450  017F                     l1890:	
  2451  017F  3003               	movlw	3
  2452  0180  00B8               	movwf	??_SW_Update
  2453  0181  0838               	movf	??_SW_Update,w
  2454  0182  00B4               	movwf	___bmul@multiplicand
  2455  0183  083B               	movf	SW_Update@index,w
  2456  0184  120A  118A  25AE  120A  118A  	fcall	___bmul
  2457  0189  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  2458  018A  0084               	movwf	4
  2459  018B  1383               	bcf	3,7	;select IRP bank0
  2460  018C  0800               	movf	0,w
  2461  018D  1283               	bcf	3,5	;RP0=0, select bank0
  2462  018E  1303               	bcf	3,6	;RP1=0, select bank0
  2463  018F  00B9               	movwf	??_SW_Update+1
  2464  0190  01BA               	clrf	??_SW_Update+2
  2465                           
  2466                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2467                           ; Switch size 1, requested type "simple"
  2468                           ; Number of cases is 1, Range of values is 0 to 0
  2469                           ; switch strategies available:
  2470                           ; Name         Instructions Cycles
  2471                           ; simple_byte            4     3 (average)
  2472                           ; direct_byte           11     8 (fixed)
  2473                           ; jumptable            260     6 (fixed)
  2474                           ;	Chosen strategy is simple_byte
  2475  0191  083A               	movf	??_SW_Update+2,w
  2476  0192  3A00               	xorlw	0	; case 0
  2477  0193  1903               	skipnz
  2478  0194  2996               	goto	l2204
  2479  0195  29A4               	goto	l1892
  2480  0196                     l2204:	
  2481                           
  2482                           ; Switch size 1, requested type "simple"
  2483                           ; Number of cases is 4, Range of values is 0 to 3
  2484                           ; switch strategies available:
  2485                           ; Name         Instructions Cycles
  2486                           ; simple_byte           13     7 (average)
  2487                           ; direct_byte           20     8 (fixed)
  2488                           ; jumptable            260     6 (fixed)
  2489                           ;	Chosen strategy is simple_byte
  2490  0196  0839               	movf	??_SW_Update+1,w
  2491  0197  3A00               	xorlw	0	; case 0
  2492  0198  1903               	skipnz
  2493  0199  28C0               	goto	l1868
  2494  019A  3A01               	xorlw	1	; case 1
  2495  019B  1903               	skipnz
  2496  019C  28F8               	goto	l1874
  2497  019D  3A03               	xorlw	3	; case 2
  2498  019E  1903               	skipnz
  2499  019F  2920               	goto	l1878
  2500  01A0  3A01               	xorlw	1	; case 3
  2501  01A1  1903               	skipnz
  2502  01A2  295C               	goto	l1884
  2503  01A3  29A4               	goto	l1892
  2504  01A4                     l1892:	
  2505                           
  2506                           ;SW.c: 152:     }
  2507  01A4  3001               	movlw	1
  2508  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  2509  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  2510  01A7  00B8               	movwf	??_SW_Update
  2511  01A8  0838               	movf	??_SW_Update,w
  2512  01A9  07BB               	addwf	SW_Update@index,f
  2513  01AA                     l1894:	
  2514  01AA  3003               	movlw	3
  2515  01AB  023B               	subwf	SW_Update@index,w
  2516  01AC  1C03               	skipc
  2517  01AD  29AF               	goto	u681
  2518  01AE  29B0               	goto	u680
  2519  01AF                     u681:	
  2520  01AF  2843               	goto	l1854
  2521  01B0                     u680:	
  2522  01B0                     l72:	
  2523  01B0  0008               	return
  2524  01B1                     __end_of_SW_Update:	
  2525                           
  2526                           	psect	text11
  2527  03CD                     __ptext11:	
  2528 ;; *************** function _SW_Init *****************
  2529 ;; Defined at:
  2530 ;;		line 29 in file "SW.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;		None
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  index           1    5[BANK0 ] unsigned char 
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  1    wreg      void 
  2537 ;; Registers used:
  2538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2544 ;;      Params:         0       0       0       0       0
  2545 ;;      Locals:         0       1       0       0       0
  2546 ;;      Temps:          0       1       0       0       0
  2547 ;;      Totals:         0       2       0       0       0
  2548 ;;Total ram usage:        2 bytes
  2549 ;; Hardware stack levels used:    1
  2550 ;; Hardware stack levels required when called:    5
  2551 ;; This function calls:
  2552 ;;		___bmul
  2553 ;; This function is called by:
  2554 ;;		_main
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           
  2559                           ;psect for function _SW_Init
  2560  03CD                     _SW_Init:	
  2561  03CD                     l1804:	
  2562                           ;incstack = 0
  2563                           ; Regs used in _SW_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2564                           
  2565  03CD                     l1806:	
  2566                           
  2567                           ;SW.c: 35:     ((((TRISB))) = (((TRISB)) & (~(1 << ((0)))))|((1) << ((0))));
  2568  03CD  1683               	bsf	3,5	;RP0=1, select bank1
  2569  03CE  1303               	bcf	3,6	;RP1=0, select bank1
  2570  03CF  0806               	movf	6,w	;volatile
  2571  03D0  39FE               	andlw	254
  2572  03D1  3801               	iorlw	1
  2573  03D2  0086               	movwf	6	;volatile
  2574  03D3                     l1808:	
  2575                           
  2576                           ;SW.c: 36:     ((((TRISB))) = (((TRISB)) & (~(1 << ((1)))))|((1) << ((1))));
  2577  03D3  0806               	movf	6,w	;volatile
  2578  03D4  39FD               	andlw	253
  2579  03D5  3802               	iorlw	2
  2580  03D6  0086               	movwf	6	;volatile
  2581  03D7                     l1810:	
  2582                           
  2583                           ;SW.c: 37:     ((((TRISB))) = (((TRISB)) & (~(1 << ((2)))))|((1) << ((2))));
  2584  03D7  0806               	movf	6,w	;volatile
  2585  03D8  39FB               	andlw	251
  2586  03D9  3804               	iorlw	4
  2587  03DA  0086               	movwf	6	;volatile
  2588  03DB                     l1812:	
  2589                           
  2590                           ;SW.c: 40:     for (index = SW_PLUS; index < (3); index++)
  2591  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2592  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  2593  03DD  01B9               	clrf	SW_Init@index
  2594  03DE                     l1818:	
  2595                           
  2596                           ;SW.c: 41:     {;SW.c: 43:         SWs_Info[index].sw_samples[0] = (1);
  2597  03DE  3003               	movlw	3
  2598  03DF  00B8               	movwf	??_SW_Init
  2599  03E0  0838               	movf	??_SW_Init,w
  2600  03E1  00B4               	movwf	___bmul@multiplicand
  2601  03E2  0839               	movf	SW_Init@index,w
  2602  03E3  120A  118A  25AE  120A  118A  	fcall	___bmul
  2603  03E8  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
  2604  03E9  0084               	movwf	4
  2605  03EA  1383               	bcf	3,7	;select IRP bank0
  2606  03EB  0180               	clrf	0
  2607  03EC  0A80               	incf	0,f
  2608                           
  2609                           ;SW.c: 44:         SWs_Info[index].sw_samples[1] = (1);
  2610  03ED  3003               	movlw	3
  2611  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  2612  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  2613  03F0  00B8               	movwf	??_SW_Init
  2614  03F1  0838               	movf	??_SW_Init,w
  2615  03F2  00B4               	movwf	___bmul@multiplicand
  2616  03F3  0839               	movf	SW_Init@index,w
  2617  03F4  120A  118A  25AE  120A  118A  	fcall	___bmul
  2618  03F9  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  2619  03FA  0084               	movwf	4
  2620  03FB  1383               	bcf	3,7	;select IRP bank0
  2621  03FC  0180               	clrf	0
  2622  03FD  0A80               	incf	0,f
  2623                           
  2624                           ;SW.c: 47:         SWs_Info[index].sw_state = SW_RELEASED;
  2625  03FE  3003               	movlw	3
  2626  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  2627  0400  1303               	bcf	3,6	;RP1=0, select bank0
  2628  0401  00B8               	movwf	??_SW_Init
  2629  0402  0838               	movf	??_SW_Init,w
  2630  0403  00B4               	movwf	___bmul@multiplicand
  2631  0404  0839               	movf	SW_Init@index,w
  2632  0405  120A  118A  25AE  120A  118A  	fcall	___bmul
  2633  040A  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  2634  040B  0084               	movwf	4
  2635  040C  1383               	bcf	3,7	;select IRP bank0
  2636  040D  0180               	clrf	0
  2637  040E                     l1820:	
  2638                           
  2639                           ;SW.c: 49:     }
  2640  040E  3001               	movlw	1
  2641  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2642  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2643  0411  00B8               	movwf	??_SW_Init
  2644  0412  0838               	movf	??_SW_Init,w
  2645  0413  07B9               	addwf	SW_Init@index,f
  2646  0414                     l1822:	
  2647  0414  3003               	movlw	3
  2648  0415  0239               	subwf	SW_Init@index,w
  2649  0416  1C03               	skipc
  2650  0417  2C19               	goto	u541
  2651  0418  2C1A               	goto	u540
  2652  0419                     u541:	
  2653  0419  2BDE               	goto	l1818
  2654  041A                     u540:	
  2655  041A                     l63:	
  2656  041A  0008               	return
  2657  041B                     __end_of_SW_Init:	
  2658                           
  2659                           	psect	text12
  2660  05AE                     __ptext12:	
  2661 ;; *************** function ___bmul *****************
  2662 ;; Defined at:
  2663 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;  multiplier      1    wreg     unsigned char 
  2666 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2669 ;;  product         1    2[BANK0 ] unsigned char 
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  1    wreg      unsigned char 
  2672 ;; Registers used:
  2673 ;;		wreg, status,2, status,0
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2679 ;;      Params:         0       1       0       0       0
  2680 ;;      Locals:         0       2       0       0       0
  2681 ;;      Temps:          0       1       0       0       0
  2682 ;;      Totals:         0       4       0       0       0
  2683 ;;Total ram usage:        4 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:    4
  2686 ;; This function calls:
  2687 ;;		Nothing
  2688 ;; This function is called by:
  2689 ;;		_SW_Init
  2690 ;;		_SW_GetState
  2691 ;;		_SW_Update
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           
  2696                           ;psect for function ___bmul
  2697  05AE                     ___bmul:	
  2698                           
  2699                           ;incstack = 0
  2700                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2701                           ;___bmul@multiplier stored from wreg
  2702  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  2703  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  2704  05B0  00B7               	movwf	___bmul@multiplier
  2705  05B1                     l1616:	
  2706  05B1  01B6               	clrf	___bmul@product
  2707  05B2                     l1618:	
  2708  05B2  1C37               	btfss	___bmul@multiplier,0
  2709  05B3  2DB5               	goto	u431
  2710  05B4  2DB6               	goto	u430
  2711  05B5                     u431:	
  2712  05B5  2DBA               	goto	l1622
  2713  05B6                     u430:	
  2714  05B6                     l1620:	
  2715  05B6  0834               	movf	___bmul@multiplicand,w
  2716  05B7  00B5               	movwf	??___bmul
  2717  05B8  0835               	movf	??___bmul,w
  2718  05B9  07B6               	addwf	___bmul@product,f
  2719  05BA                     l1622:	
  2720  05BA  1003               	clrc
  2721  05BB  0DB4               	rlf	___bmul@multiplicand,f
  2722  05BC                     l1624:	
  2723  05BC  1003               	clrc
  2724  05BD  0CB7               	rrf	___bmul@multiplier,f
  2725  05BE  0837               	movf	___bmul@multiplier,w
  2726  05BF  1D03               	btfss	3,2
  2727  05C0  2DC2               	goto	u441
  2728  05C1  2DC3               	goto	u440
  2729  05C2                     u441:	
  2730  05C2  2DB2               	goto	l1618
  2731  05C3                     u440:	
  2732  05C3                     l1626:	
  2733  05C3  0836               	movf	___bmul@product,w
  2734  05C4                     l466:	
  2735  05C4  0008               	return
  2736  05C5                     __end_of___bmul:	
  2737                           
  2738                           	psect	text13
  2739  045A                     __ptext13:	
  2740 ;; *************** function _SSD_Update *****************
  2741 ;; Defined at:
  2742 ;;		line 71 in file "SSD.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;		None
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;		None
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      void 
  2749 ;; Registers used:
  2750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2756 ;;      Params:         0       0       0       0       0
  2757 ;;      Locals:         0       0       0       0       0
  2758 ;;      Temps:          0       1       0       0       0
  2759 ;;      Totals:         0       1       0       0       0
  2760 ;;Total ram usage:        1 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    6
  2763 ;; This function calls:
  2764 ;;		_SSD_Out
  2765 ;; This function is called by:
  2766 ;;		_main
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           
  2771                           ;psect for function _SSD_Update
  2772  045A                     _SSD_Update:	
  2773  045A                     l1824:	
  2774                           ;incstack = 0
  2775                           ; Regs used in _SSD_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2776                           
  2777                           
  2778                           ;SSD.c: 73:     static tWord SSD_counter = 0;;SSD.c: 77:     SSD_counter += (10);
  2779  045A  300A               	movlw	10
  2780  045B  1283               	bcf	3,5	;RP0=0, select bank0
  2781  045C  1303               	bcf	3,6	;RP1=0, select bank0
  2782  045D  07AD               	addwf	SSD_Update@SSD_counter,f
  2783  045E  1803               	skipnc
  2784  045F  0AAE               	incf	SSD_Update@SSD_counter+1,f
  2785  0460  3000               	movlw	0
  2786  0461  07AE               	addwf	SSD_Update@SSD_counter+1,f
  2787  0462                     l1826:	
  2788                           
  2789                           ;SSD.c: 79:     if (SSD_counter != (10)){
  2790  0462  300A               	movlw	10
  2791  0463  062D               	xorwf	SSD_Update@SSD_counter,w
  2792  0464  042E               	iorwf	SSD_Update@SSD_counter+1,w
  2793  0465  1903               	btfsc	3,2
  2794  0466  2C68               	goto	u551
  2795  0467  2C69               	goto	u550
  2796  0468                     u551:	
  2797  0468  2C6A               	goto	l1830
  2798  0469                     u550:	
  2799  0469  2C88               	goto	l134
  2800  046A                     l1830:	
  2801                           
  2802                           ;SSD.c: 83:     SSD_counter = 0;
  2803  046A  01AD               	clrf	SSD_Update@SSD_counter
  2804  046B  01AE               	clrf	SSD_Update@SSD_counter+1
  2805  046C                     l1832:	
  2806                           
  2807                           ;SSD.c: 87:     SSD_Out(SSD_current, SSD_Values[SSD_current]);
  2808  046C  0832               	movf	_SSD_current,w
  2809  046D  3E45               	addlw	(low (_SSD_Values| 0))& (0+255)
  2810  046E  0084               	movwf	4
  2811  046F  1383               	bcf	3,7	;select IRP bank0
  2812  0470  0800               	movf	0,w
  2813  0471  00BA               	movwf	??_SSD_Update
  2814  0472  083A               	movf	??_SSD_Update,w
  2815  0473  00B8               	movwf	SSD_Out@ssd_symbol
  2816  0474  0832               	movf	_SSD_current,w
  2817  0475  120A  118A  2489  120A  118A  	fcall	_SSD_Out
  2818  047A                     l1834:	
  2819                           
  2820                           ;SSD.c: 89:     if (SSD_current == SSD_THIRD)
  2821  047A  3002               	movlw	2
  2822  047B  1283               	bcf	3,5	;RP0=0, select bank0
  2823  047C  1303               	bcf	3,6	;RP1=0, select bank0
  2824  047D  0632               	xorwf	_SSD_current,w
  2825  047E  1D03               	btfss	3,2
  2826  047F  2C81               	goto	u561
  2827  0480  2C82               	goto	u560
  2828  0481                     u561:	
  2829  0481  2C84               	goto	l1838
  2830  0482                     u560:	
  2831  0482                     l1836:	
  2832                           
  2833                           ;SSD.c: 90:     {;SSD.c: 91:         SSD_current = SSD_FIRST;
  2834  0482  01B2               	clrf	_SSD_current
  2835                           
  2836                           ;SSD.c: 92:     } else
  2837  0483  2C88               	goto	l134
  2838  0484                     l1838:	
  2839                           
  2840                           ;SSD.c: 93:     {;SSD.c: 94:         SSD_current++;
  2841  0484  3001               	movlw	1
  2842  0485  00BA               	movwf	??_SSD_Update
  2843  0486  083A               	movf	??_SSD_Update,w
  2844  0487  07B2               	addwf	_SSD_current,f
  2845  0488                     l134:	
  2846  0488  0008               	return
  2847  0489                     __end_of_SSD_Update:	
  2848                           
  2849                           	psect	text14
  2850  032B                     __ptext14:	
  2851 ;; *************** function _MOT_Update *****************
  2852 ;; Defined at:
  2853 ;;		line 71 in file "Motor.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;		None
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;		None
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  1    wreg      void 
  2860 ;; Registers used:
  2861 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2867 ;;      Params:         0       0       0       0       0
  2868 ;;      Locals:         0       0       0       0       0
  2869 ;;      Temps:          0       2       0       0       0
  2870 ;;      Totals:         0       2       0       0       0
  2871 ;;Total ram usage:        2 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:    4
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_main
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           
  2882                           ;psect for function _MOT_Update
  2883  032B                     _MOT_Update:	
  2884  032B                     l1932:	
  2885                           ;incstack = 0
  2886                           ; Regs used in _MOT_Update: [wreg-fsr0h+status,2+status,0]
  2887                           
  2888                           
  2889                           ;Motor.c: 74:     static uint8 motor_tick_counter = 10;;Motor.c: 77:     motor_tick_coun
      +                          ter += (10);
  2890  032B  300A               	movlw	10
  2891  032C  1283               	bcf	3,5	;RP0=0, select bank0
  2892  032D  1303               	bcf	3,6	;RP1=0, select bank0
  2893  032E  00B4               	movwf	??_MOT_Update
  2894  032F  0834               	movf	??_MOT_Update,w
  2895  0330  07FD               	addwf	MOT_Update@motor_tick_counter,f
  2896                           
  2897                           ;Motor.c: 80:     if(motor_tick_counter != (20)) return;
  2898  0331  3014               	movlw	20
  2899  0332  067D               	xorwf	MOT_Update@motor_tick_counter,w
  2900  0333  1903               	btfsc	3,2
  2901  0334  2B36               	goto	u711
  2902  0335  2B37               	goto	u710
  2903  0336                     u711:	
  2904  0336  2B38               	goto	l1936
  2905  0337                     u710:	
  2906  0337  2B7D               	goto	l258
  2907  0338                     l1936:	
  2908                           
  2909                           ;Motor.c: 83:     motor_tick_counter = 0;
  2910  0338  01FD               	clrf	MOT_Update@motor_tick_counter
  2911                           
  2912                           ;Motor.c: 86:     switch(motor_state)
  2913  0339  2B6D               	goto	l1962
  2914  033A                     l1938:	
  2915                           
  2916                           ;Motor.c: 92:             if(Actual_angle > Target_firing_angle)
  2917  033A  084B               	movf	_Actual_angle,w
  2918  033B  024A               	subwf	_Target_firing_angle,w
  2919  033C  1803               	skipnc
  2920  033D  2B3F               	goto	u721
  2921  033E  2B40               	goto	u720
  2922  033F                     u721:	
  2923  033F  2B43               	goto	l1942
  2924  0340                     u720:	
  2925  0340                     l1940:	
  2926                           
  2927                           ;Motor.c: 93:             {;Motor.c: 96:                 Actual_angle -= (10);
  2928  0340  300A               	movlw	10
  2929  0341  02CB               	subwf	_Actual_angle,f
  2930                           
  2931                           ;Motor.c: 97:             }
  2932  0342  2B7D               	goto	l258
  2933  0343                     l1942:	
  2934                           
  2935                           ;Motor.c: 100:             {;Motor.c: 103:                 Actual_angle += (10);
  2936  0343  300A               	movlw	10
  2937  0344  00B4               	movwf	??_MOT_Update
  2938  0345  0834               	movf	??_MOT_Update,w
  2939  0346  07CB               	addwf	_Actual_angle,f
  2940  0347  2B7D               	goto	l258
  2941  0348                     l1944:	
  2942                           
  2943                           ;Motor.c: 111:             if(Actual_angle == Target_firing_angle)
  2944  0348  084B               	movf	_Actual_angle,w
  2945  0349  064A               	xorwf	_Target_firing_angle,w
  2946  034A  1D03               	skipz
  2947  034B  2B4D               	goto	u731
  2948  034C  2B4E               	goto	u730
  2949  034D                     u731:	
  2950  034D  2B54               	goto	l1950
  2951  034E                     u730:	
  2952  034E                     l1946:	
  2953                           
  2954                           ;Motor.c: 112:             {;Motor.c: 116:                 Actual_angle +=5;
  2955  034E  3005               	movlw	5
  2956  034F  00B4               	movwf	??_MOT_Update
  2957  0350  0834               	movf	??_MOT_Update,w
  2958  0351  07CB               	addwf	_Actual_angle,f
  2959  0352                     l1948:	
  2960                           
  2961                           ;Motor.c: 117:                 motor_state = Mot_normal_state;
  2962  0352  01C9               	clrf	_motor_state
  2963                           
  2964                           ;Motor.c: 118:             }
  2965  0353  2B7D               	goto	l258
  2966  0354                     l1950:	
  2967                           
  2968                           ;Motor.c: 120:             {;Motor.c: 124:                  Switching_Counter += (20);
  2969  0354  3014               	movlw	20
  2970  0355  00B4               	movwf	??_MOT_Update
  2971  0356  0834               	movf	??_MOT_Update,w
  2972  0357  07FC               	addwf	_Switching_Counter,f
  2973                           
  2974                           ;Motor.c: 126:                 if((40) == Switching_Counter)
  2975  0358  3028               	movlw	40
  2976  0359  067C               	xorwf	_Switching_Counter,w
  2977  035A  1D03               	btfss	3,2
  2978  035B  2B5D               	goto	u741
  2979  035C  2B5E               	goto	u740
  2980  035D                     u741:	
  2981  035D  2B7D               	goto	l258
  2982  035E                     u740:	
  2983  035E                     l1952:	
  2984                           
  2985                           ;Motor.c: 127:                 {;Motor.c: 133:                      if(Actual_angle < Ta
      +                          rget_firing_angle)
  2986  035E  084A               	movf	_Target_firing_angle,w
  2987  035F  024B               	subwf	_Actual_angle,w
  2988  0360  1803               	skipnc
  2989  0361  2B63               	goto	u751
  2990  0362  2B64               	goto	u750
  2991  0363                     u751:	
  2992  0363  2B69               	goto	l1956
  2993  0364                     u750:	
  2994  0364                     l1954:	
  2995                           
  2996                           ;Motor.c: 134:                      {;Motor.c: 135:                          Actual_angl
      +                          e ++ ;
  2997  0364  3001               	movlw	1
  2998  0365  00B4               	movwf	??_MOT_Update
  2999  0366  0834               	movf	??_MOT_Update,w
  3000  0367  07CB               	addwf	_Actual_angle,f
  3001                           
  3002                           ;Motor.c: 137:                      }
  3003  0368  2B6B               	goto	l1958
  3004  0369                     l1956:	
  3005                           
  3006                           ;Motor.c: 140:                      {;Motor.c: 142:                          Actual_angl
      +                          e --;
  3007  0369  3001               	movlw	1
  3008  036A  02CB               	subwf	_Actual_angle,f
  3009  036B                     l1958:	
  3010                           
  3011                           ;Motor.c: 145:                      Switching_Counter = 0 ;
  3012  036B  01FC               	clrf	_Switching_Counter
  3013  036C  2B7D               	goto	l258
  3014  036D                     l1962:	
  3015  036D  0849               	movf	_motor_state,w
  3016  036E  00B4               	movwf	??_MOT_Update
  3017  036F  01B5               	clrf	??_MOT_Update+1
  3018                           
  3019                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3020                           ; Switch size 1, requested type "simple"
  3021                           ; Number of cases is 1, Range of values is 0 to 0
  3022                           ; switch strategies available:
  3023                           ; Name         Instructions Cycles
  3024                           ; simple_byte            4     3 (average)
  3025                           ; direct_byte           11     8 (fixed)
  3026                           ; jumptable            260     6 (fixed)
  3027                           ;	Chosen strategy is simple_byte
  3028  0370  0835               	movf	??_MOT_Update+1,w
  3029  0371  3A00               	xorlw	0	; case 0
  3030  0372  1903               	skipnz
  3031  0373  2B75               	goto	l2206
  3032  0374  2B7D               	goto	l258
  3033  0375                     l2206:	
  3034                           
  3035                           ; Switch size 1, requested type "simple"
  3036                           ; Number of cases is 2, Range of values is 0 to 1
  3037                           ; switch strategies available:
  3038                           ; Name         Instructions Cycles
  3039                           ; simple_byte            7     4 (average)
  3040                           ; direct_byte           14     8 (fixed)
  3041                           ; jumptable            260     6 (fixed)
  3042                           ;	Chosen strategy is simple_byte
  3043  0375  0834               	movf	??_MOT_Update,w
  3044  0376  3A00               	xorlw	0	; case 0
  3045  0377  1903               	skipnz
  3046  0378  2B3A               	goto	l1938
  3047  0379  3A01               	xorlw	1	; case 1
  3048  037A  1903               	skipnz
  3049  037B  2B48               	goto	l1944
  3050  037C  2B7D               	goto	l258
  3051  037D                     l258:	
  3052  037D  0008               	return
  3053  037E                     __end_of_MOT_Update:	
  3054                           
  3055                           	psect	text15
  3056  024E                     __ptext15:	
  3057 ;; *************** function _DISP_Update *****************
  3058 ;; Defined at:
  3059 ;;		line 31 in file "Display.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;		None
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;		None
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      void 
  3066 ;; Registers used:
  3067 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3073 ;;      Params:         0       0       0       0       0
  3074 ;;      Locals:         0       0       0       0       0
  3075 ;;      Temps:          0       2       0       0       0
  3076 ;;      Totals:         0       2       0       0       0
  3077 ;;Total ram usage:        2 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    5
  3080 ;; This function calls:
  3081 ;;		_SSD_SetValue
  3082 ;;		_VC_GetSpeed
  3083 ;; This function is called by:
  3084 ;;		_main
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           
  3089                           ;psect for function _DISP_Update
  3090  024E                     _DISP_Update:	
  3091  024E                     l1900:	
  3092                           ;incstack = 0
  3093                           ; Regs used in _DISP_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3094                           
  3095                           
  3096                           ;Display.c: 34:     static uint16 DISP_counter = 0;;Display.c: 37:     DISP_counter += (
      +                          10);
  3097  024E  300A               	movlw	10
  3098  024F  1283               	bcf	3,5	;RP0=0, select bank0
  3099  0250  1303               	bcf	3,6	;RP1=0, select bank0
  3100  0251  07A9               	addwf	DISP_Update@DISP_counter,f
  3101  0252  1803               	skipnc
  3102  0253  0AAA               	incf	DISP_Update@DISP_counter+1,f
  3103  0254  3000               	movlw	0
  3104  0255  07AA               	addwf	DISP_Update@DISP_counter+1,f
  3105  0256                     l1902:	
  3106                           
  3107                           ;Display.c: 39:     if(DISP_counter != (20))
  3108  0256  3014               	movlw	20
  3109  0257  0629               	xorwf	DISP_Update@DISP_counter,w
  3110  0258  042A               	iorwf	DISP_Update@DISP_counter+1,w
  3111  0259  1903               	btfsc	3,2
  3112  025A  2A5C               	goto	u691
  3113  025B  2A5D               	goto	u690
  3114  025C                     u691:	
  3115  025C  2A5E               	goto	l1906
  3116  025D                     u690:	
  3117  025D  2AD6               	goto	l229
  3118  025E                     l1906:	
  3119                           
  3120                           ;Display.c: 44:     DISP_counter = 0;
  3121  025E  01A9               	clrf	DISP_Update@DISP_counter
  3122  025F  01AA               	clrf	DISP_Update@DISP_counter+1
  3123                           
  3124                           ;Display.c: 49:      switch(VC_GetSpeed())
  3125  0260  2ABD               	goto	l1916
  3126  0261                     l1908:	
  3127                           
  3128                           ;Display.c: 52:             {;Display.c: 53:                  SSD_SetValue(SSD_FIRST, SS
      +                          D_Low);
  3129  0261  01B4               	clrf	SSD_SetValue@ssd_symbol
  3130  0262  3000               	movlw	0
  3131  0263  120A  118A  260C  120A  118A  	fcall	_SSD_SetValue
  3132                           
  3133                           ;Display.c: 54:                  SSD_SetValue(SSD_SECONED, SSD_NULL);
  3134  0268  3003               	movlw	3
  3135  0269  1283               	bcf	3,5	;RP0=0, select bank0
  3136  026A  1303               	bcf	3,6	;RP1=0, select bank0
  3137  026B  00B7               	movwf	??_DISP_Update
  3138  026C  0837               	movf	??_DISP_Update,w
  3139  026D  00B4               	movwf	SSD_SetValue@ssd_symbol
  3140  026E  3001               	movlw	1
  3141  026F  120A  118A  260C  120A  118A  	fcall	_SSD_SetValue
  3142                           
  3143                           ;Display.c: 55:                  SSD_SetValue(SSD_THIRD, SSD_NULL);
  3144  0274  3003               	movlw	3
  3145  0275  1283               	bcf	3,5	;RP0=0, select bank0
  3146  0276  1303               	bcf	3,6	;RP1=0, select bank0
  3147  0277  00B7               	movwf	??_DISP_Update
  3148  0278  0837               	movf	??_DISP_Update,w
  3149  0279  00B4               	movwf	SSD_SetValue@ssd_symbol
  3150  027A  3002               	movlw	2
  3151  027B  120A  118A  260C  120A  118A  	fcall	_SSD_SetValue
  3152                           
  3153                           ;Display.c: 57:                   break;
  3154  0280  2AD6               	goto	l229
  3155  0281                     l1910:	
  3156                           
  3157                           ;Display.c: 61:             {;Display.c: 62:                  SSD_SetValue(SSD_FIRST, SS
      +                          D_Low);
  3158  0281  01B4               	clrf	SSD_SetValue@ssd_symbol
  3159  0282  3000               	movlw	0
  3160  0283  120A  118A  260C  120A  118A  	fcall	_SSD_SetValue
  3161                           
  3162                           ;Display.c: 63:                  SSD_SetValue(SSD_SECONED, SSD_Mid);
  3163  0288  1283               	bcf	3,5	;RP0=0, select bank0
  3164  0289  1303               	bcf	3,6	;RP1=0, select bank0
  3165  028A  01B4               	clrf	SSD_SetValue@ssd_symbol
  3166  028B  0AB4               	incf	SSD_SetValue@ssd_symbol,f
  3167  028C  3001               	movlw	1
  3168  028D  120A  118A  260C  120A  118A  	fcall	_SSD_SetValue
  3169                           
  3170                           ;Display.c: 64:                  SSD_SetValue(SSD_THIRD, SSD_NULL);
  3171  0292  3003               	movlw	3
  3172  0293  1283               	bcf	3,5	;RP0=0, select bank0
  3173  0294  1303               	bcf	3,6	;RP1=0, select bank0
  3174  0295  00B7               	movwf	??_DISP_Update
  3175  0296  0837               	movf	??_DISP_Update,w
  3176  0297  00B4               	movwf	SSD_SetValue@ssd_symbol
  3177  0298  3002               	movlw	2
  3178  0299  120A  118A  260C  120A  118A  	fcall	_SSD_SetValue
  3179                           
  3180                           ;Display.c: 65:                  break;
  3181  029E  2AD6               	goto	l229
  3182  029F                     l1912:	
  3183                           
  3184                           ;Display.c: 69:             {;Display.c: 70:                 SSD_SetValue(SSD_FIRST,SSD_
      +                          Low);
  3185  029F  01B4               	clrf	SSD_SetValue@ssd_symbol
  3186  02A0  3000               	movlw	0
  3187  02A1  120A  118A  260C  120A  118A  	fcall	_SSD_SetValue
  3188                           
  3189                           ;Display.c: 71:                 SSD_SetValue(SSD_SECONED,SSD_Mid);
  3190  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  3191  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  3192  02A8  01B4               	clrf	SSD_SetValue@ssd_symbol
  3193  02A9  0AB4               	incf	SSD_SetValue@ssd_symbol,f
  3194  02AA  3001               	movlw	1
  3195  02AB  120A  118A  260C  120A  118A  	fcall	_SSD_SetValue
  3196                           
  3197                           ;Display.c: 72:                 SSD_SetValue(SSD_THIRD,SSD_High);
  3198  02B0  3002               	movlw	2
  3199  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  3200  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  3201  02B3  00B7               	movwf	??_DISP_Update
  3202  02B4  0837               	movf	??_DISP_Update,w
  3203  02B5  00B4               	movwf	SSD_SetValue@ssd_symbol
  3204  02B6  3002               	movlw	2
  3205  02B7  120A  118A  260C  120A  118A  	fcall	_SSD_SetValue
  3206                           
  3207                           ;Display.c: 73:                 break;
  3208  02BC  2AD6               	goto	l229
  3209  02BD                     l1916:	
  3210  02BD  120A  118A  2653  120A  118A  	fcall	_VC_GetSpeed
  3211  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  3212  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  3213  02C4  00B7               	movwf	??_DISP_Update
  3214  02C5  01B8               	clrf	??_DISP_Update+1
  3215                           
  3216                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3217                           ; Switch size 1, requested type "simple"
  3218                           ; Number of cases is 1, Range of values is 0 to 0
  3219                           ; switch strategies available:
  3220                           ; Name         Instructions Cycles
  3221                           ; simple_byte            4     3 (average)
  3222                           ; direct_byte           11     8 (fixed)
  3223                           ; jumptable            260     6 (fixed)
  3224                           ;	Chosen strategy is simple_byte
  3225  02C6  0838               	movf	??_DISP_Update+1,w
  3226  02C7  3A00               	xorlw	0	; case 0
  3227  02C8  1903               	skipnz
  3228  02C9  2ACB               	goto	l2208
  3229  02CA  2AD6               	goto	l229
  3230  02CB                     l2208:	
  3231                           
  3232                           ; Switch size 1, requested type "simple"
  3233                           ; Number of cases is 3, Range of values is 10 to 140
  3234                           ; switch strategies available:
  3235                           ; Name         Instructions Cycles
  3236                           ; simple_byte           10     6 (average)
  3237                           ; jumptable            263     9 (fixed)
  3238                           ;	Chosen strategy is simple_byte
  3239  02CB  0837               	movf	??_DISP_Update,w
  3240  02CC  3A0A               	xorlw	10	; case 10
  3241  02CD  1903               	skipnz
  3242  02CE  2A9F               	goto	l1912
  3243  02CF  3A50               	xorlw	80	; case 90
  3244  02D0  1903               	skipnz
  3245  02D1  2A81               	goto	l1910
  3246  02D2  3AD6               	xorlw	214	; case 140
  3247  02D3  1903               	skipnz
  3248  02D4  2A61               	goto	l1908
  3249  02D5  2AD6               	goto	l229
  3250  02D6                     l229:	
  3251  02D6  0008               	return
  3252  02D7                     __end_of_DISP_Update:	
  3253                           
  3254                           	psect	text16
  3255  0653                     __ptext16:	
  3256 ;; *************** function _VC_GetSpeed *****************
  3257 ;; Defined at:
  3258 ;;		line 92 in file "VC.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;		None
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;		None
  3263 ;; Return value:  Size  Location     Type
  3264 ;;                  1    wreg      enum E850
  3265 ;; Registers used:
  3266 ;;		wreg
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3272 ;;      Params:         0       0       0       0       0
  3273 ;;      Locals:         0       0       0       0       0
  3274 ;;      Temps:          0       0       0       0       0
  3275 ;;      Totals:         0       0       0       0       0
  3276 ;;Total ram usage:        0 bytes
  3277 ;; Hardware stack levels used:    1
  3278 ;; Hardware stack levels required when called:    4
  3279 ;; This function calls:
  3280 ;;		Nothing
  3281 ;; This function is called by:
  3282 ;;		_DISP_Update
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           
  3287                           ;psect for function _VC_GetSpeed
  3288  0653                     _VC_GetSpeed:	
  3289  0653                     l1760:	
  3290                           ;incstack = 0
  3291                           ; Regs used in _VC_GetSpeed: [wreg]
  3292                           
  3293                           
  3294                           ;VC.c: 95:     return Motor_speed;
  3295  0653  1283               	bcf	3,5	;RP0=0, select bank0
  3296  0654  1303               	bcf	3,6	;RP1=0, select bank0
  3297  0655  084C               	movf	_Motor_speed,w
  3298  0656                     l188:	
  3299  0656  0008               	return
  3300  0657                     __end_of_VC_GetSpeed:	
  3301                           
  3302                           	psect	text17
  3303  060C                     __ptext17:	
  3304 ;; *************** function _SSD_SetValue *****************
  3305 ;; Defined at:
  3306 ;;		line 100 in file "SSD.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;  ssd             1    wreg     enum E854
  3309 ;;  ssd_symbol      1    0[BANK0 ] enum E863
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;  ssd             1    2[BANK0 ] enum E854
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  1    wreg      void 
  3314 ;; Registers used:
  3315 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3321 ;;      Params:         0       1       0       0       0
  3322 ;;      Locals:         0       1       0       0       0
  3323 ;;      Temps:          0       1       0       0       0
  3324 ;;      Totals:         0       3       0       0       0
  3325 ;;Total ram usage:        3 bytes
  3326 ;; Hardware stack levels used:    1
  3327 ;; Hardware stack levels required when called:    4
  3328 ;; This function calls:
  3329 ;;		Nothing
  3330 ;; This function is called by:
  3331 ;;		_DISP_Update
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           
  3336                           ;psect for function _SSD_SetValue
  3337  060C                     _SSD_SetValue:	
  3338                           
  3339                           ;incstack = 0
  3340                           ; Regs used in _SSD_SetValue: [wreg-fsr0h+status,2+status,0]
  3341                           ;SSD_SetValue@ssd stored from wreg
  3342  060C  1283               	bcf	3,5	;RP0=0, select bank0
  3343  060D  1303               	bcf	3,6	;RP1=0, select bank0
  3344  060E  00B6               	movwf	SSD_SetValue@ssd
  3345  060F                     l1684:	
  3346                           
  3347                           ;SSD.c: 100: void SSD_SetValue(tSSD ssd, tSSD_Symbol ssd_symbol);SSD.c: 101: {;SSD.c: 10
      +                          3:     SSD_Values[ssd] = ssd_symbol;
  3348  060F  0834               	movf	SSD_SetValue@ssd_symbol,w
  3349  0610  00B5               	movwf	??_SSD_SetValue
  3350  0611  0836               	movf	SSD_SetValue@ssd,w
  3351  0612  3E45               	addlw	(low (_SSD_Values| 0))& (0+255)
  3352  0613  0084               	movwf	4
  3353  0614  0835               	movf	??_SSD_SetValue,w
  3354  0615  1383               	bcf	3,7	;select IRP bank0
  3355  0616  0080               	movwf	0
  3356  0617                     l139:	
  3357  0617  0008               	return
  3358  0618                     __end_of_SSD_SetValue:	
  3359                           
  3360                           	psect	text18
  3361  04B6                     __ptext18:	
  3362 ;; *************** function _DISP_Init *****************
  3363 ;; Defined at:
  3364 ;;		line 18 in file "Display.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;		None
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3378 ;;      Params:         0       0       0       0       0
  3379 ;;      Locals:         0       0       0       0       0
  3380 ;;      Temps:          0       1       0       0       0
  3381 ;;      Totals:         0       1       0       0       0
  3382 ;;Total ram usage:        1 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    7
  3385 ;; This function calls:
  3386 ;;		_SSD_Init
  3387 ;; This function is called by:
  3388 ;;		_main
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           
  3393                           ;psect for function _DISP_Init
  3394  04B6                     _DISP_Init:	
  3395  04B6                     l1802:	
  3396                           ;incstack = 0
  3397                           ; Regs used in _DISP_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3398                           
  3399                           
  3400                           ;Display.c: 23:     SSD_Init(SSD_FIRST, SSD_NULL);
  3401  04B6  3003               	movlw	3
  3402  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  3403  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  3404  04B9  00C0               	movwf	??_DISP_Init
  3405  04BA  0840               	movf	??_DISP_Init,w
  3406  04BB  00BA               	movwf	SSD_Init@symbol
  3407  04BC  3000               	movlw	0
  3408  04BD  120A  118A  237E  120A  118A  	fcall	_SSD_Init
  3409                           
  3410                           ;Display.c: 24:     SSD_Init(SSD_SECONED, SSD_NULL);
  3411  04C2  3003               	movlw	3
  3412  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  3413  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  3414  04C5  00C0               	movwf	??_DISP_Init
  3415  04C6  0840               	movf	??_DISP_Init,w
  3416  04C7  00BA               	movwf	SSD_Init@symbol
  3417  04C8  3001               	movlw	1
  3418  04C9  120A  118A  237E  120A  118A  	fcall	_SSD_Init
  3419                           
  3420                           ;Display.c: 25:     SSD_Init(SSD_THIRD, SSD_NULL);
  3421  04CE  3003               	movlw	3
  3422  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  3423  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  3424  04D1  00C0               	movwf	??_DISP_Init
  3425  04D2  0840               	movf	??_DISP_Init,w
  3426  04D3  00BA               	movwf	SSD_Init@symbol
  3427  04D4  3002               	movlw	2
  3428  04D5  120A  118A  237E  120A  118A  	fcall	_SSD_Init
  3429  04DA                     l223:	
  3430  04DA  0008               	return
  3431  04DB                     __end_of_DISP_Init:	
  3432                           
  3433                           	psect	text19
  3434  037E                     __ptext19:	
  3435 ;; *************** function _SSD_Init *****************
  3436 ;; Defined at:
  3437 ;;		line 41 in file "SSD.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;  ssd             1    wreg     enum E854
  3440 ;;  symbol          1    6[BANK0 ] enum E863
  3441 ;; Auto vars:     Size  Location     Type
  3442 ;;  ssd             1   11[BANK0 ] enum E854
  3443 ;; Return value:  Size  Location     Type
  3444 ;;                  1    wreg      void 
  3445 ;; Registers used:
  3446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3447 ;; Tracked objects:
  3448 ;;		On entry : 0/0
  3449 ;;		On exit  : 0/0
  3450 ;;		Unchanged: 0/0
  3451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3452 ;;      Params:         0       1       0       0       0
  3453 ;;      Locals:         0       3       0       0       0
  3454 ;;      Temps:          0       2       0       0       0
  3455 ;;      Totals:         0       6       0       0       0
  3456 ;;Total ram usage:        6 bytes
  3457 ;; Hardware stack levels used:    1
  3458 ;; Hardware stack levels required when called:    6
  3459 ;; This function calls:
  3460 ;;		_SSD_Out
  3461 ;;		_SSD_SetState
  3462 ;; This function is called by:
  3463 ;;		_DISP_Init
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           
  3468                           ;psect for function _SSD_Init
  3469  037E                     _SSD_Init:	
  3470                           
  3471                           ;incstack = 0
  3472                           ; Regs used in _SSD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3473                           ;SSD_Init@ssd stored from wreg
  3474  037E  1283               	bcf	3,5	;RP0=0, select bank0
  3475  037F  1303               	bcf	3,6	;RP1=0, select bank0
  3476  0380  00BF               	movwf	SSD_Init@ssd
  3477  0381                     l1654:	
  3478  0381                     l1656:	
  3479  0381  1683               	bsf	3,5	;RP0=1, select bank1
  3480  0382  1303               	bcf	3,6	;RP1=0, select bank1
  3481  0383  0188               	clrf	8	;volatile
  3482  0384                     l1658:	
  3483                           
  3484                           ;SSD.c: 46:     SSD_Out(ssd, SSD_NULL);
  3485  0384  3003               	movlw	3
  3486  0385  1283               	bcf	3,5	;RP0=0, select bank0
  3487  0386  1303               	bcf	3,6	;RP1=0, select bank0
  3488  0387  00BB               	movwf	??_SSD_Init
  3489  0388  083B               	movf	??_SSD_Init,w
  3490  0389  00B8               	movwf	SSD_Out@ssd_symbol
  3491  038A  083F               	movf	SSD_Init@ssd,w
  3492  038B  120A  118A  2489  120A  118A  	fcall	_SSD_Out
  3493                           
  3494                           ;SSD.c: 49:     switch (ssd)
  3495  0390  2BB0               	goto	l1674
  3496  0391                     l1660:	
  3497                           
  3498                           ;SSD.c: 52:             ((((TRISB))) = (((TRISB)) & (~(1 << ((7)))))|((0) << ((7))));
  3499  0391  1683               	bsf	3,5	;RP0=1, select bank1
  3500  0392  1303               	bcf	3,6	;RP1=0, select bank1
  3501  0393  0806               	movf	6,w	;volatile
  3502  0394  397F               	andlw	127
  3503  0395  0086               	movwf	6	;volatile
  3504  0396                     l1662:	
  3505                           
  3506                           ;SSD.c: 53:             SSD_Values[SSD_FIRST] = SSD_Low;
  3507  0396  1283               	bcf	3,5	;RP0=0, select bank0
  3508  0397  1303               	bcf	3,6	;RP1=0, select bank0
  3509  0398  01C5               	clrf	_SSD_Values
  3510                           
  3511                           ;SSD.c: 54:             break;
  3512  0399  2BC5               	goto	l1676
  3513  039A                     l1664:	
  3514                           
  3515                           ;SSD.c: 56:             ((((TRISB))) = (((TRISB)) & (~(1 << ((6)))))|((0) << ((6))));
  3516  039A  1683               	bsf	3,5	;RP0=1, select bank1
  3517  039B  1303               	bcf	3,6	;RP1=0, select bank1
  3518  039C  0806               	movf	6,w	;volatile
  3519  039D  39BF               	andlw	191
  3520  039E  0086               	movwf	6	;volatile
  3521  039F                     l1666:	
  3522                           
  3523                           ;SSD.c: 57:             SSD_Values[SSD_SECONED] = SSD_Mid;
  3524  039F  1283               	bcf	3,5	;RP0=0, select bank0
  3525  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  3526  03A1  01C6               	clrf	_SSD_Values+1
  3527  03A2  0AC6               	incf	_SSD_Values+1,f
  3528                           
  3529                           ;SSD.c: 58:             break;
  3530  03A3  2BC5               	goto	l1676
  3531  03A4                     l1668:	
  3532                           
  3533                           ;SSD.c: 60:             ((((TRISB))) = (((TRISB)) & (~(1 << ((5)))))|((0) << ((5))));
  3534  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  3535  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  3536  03A6  0806               	movf	6,w	;volatile
  3537  03A7  39DF               	andlw	223
  3538  03A8  0086               	movwf	6	;volatile
  3539  03A9                     l1670:	
  3540                           
  3541                           ;SSD.c: 61:             SSD_Values[SSD_THIRD] = SSD_High;
  3542  03A9  3002               	movlw	2
  3543  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  3544  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  3545  03AC  00BB               	movwf	??_SSD_Init
  3546  03AD  083B               	movf	??_SSD_Init,w
  3547  03AE  00C7               	movwf	_SSD_Values+2
  3548                           
  3549                           ;SSD.c: 62:             break;
  3550  03AF  2BC5               	goto	l1676
  3551  03B0                     l1674:	
  3552  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  3553  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  3554  03B2  083F               	movf	SSD_Init@ssd,w
  3555  03B3  00BB               	movwf	??_SSD_Init
  3556  03B4  01BC               	clrf	??_SSD_Init+1
  3557                           
  3558                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3559                           ; Switch size 1, requested type "simple"
  3560                           ; Number of cases is 1, Range of values is 0 to 0
  3561                           ; switch strategies available:
  3562                           ; Name         Instructions Cycles
  3563                           ; simple_byte            4     3 (average)
  3564                           ; direct_byte           11     8 (fixed)
  3565                           ; jumptable            260     6 (fixed)
  3566                           ;	Chosen strategy is simple_byte
  3567  03B5  083C               	movf	??_SSD_Init+1,w
  3568  03B6  3A00               	xorlw	0	; case 0
  3569  03B7  1903               	skipnz
  3570  03B8  2BBA               	goto	l2210
  3571  03B9  2BC5               	goto	l1676
  3572  03BA                     l2210:	
  3573                           
  3574                           ; Switch size 1, requested type "simple"
  3575                           ; Number of cases is 3, Range of values is 0 to 2
  3576                           ; switch strategies available:
  3577                           ; Name         Instructions Cycles
  3578                           ; simple_byte           10     6 (average)
  3579                           ; direct_byte           17     8 (fixed)
  3580                           ; jumptable            260     6 (fixed)
  3581                           ;	Chosen strategy is simple_byte
  3582  03BA  083B               	movf	??_SSD_Init,w
  3583  03BB  3A00               	xorlw	0	; case 0
  3584  03BC  1903               	skipnz
  3585  03BD  2B91               	goto	l1660
  3586  03BE  3A01               	xorlw	1	; case 1
  3587  03BF  1903               	skipnz
  3588  03C0  2B9A               	goto	l1664
  3589  03C1  3A03               	xorlw	3	; case 2
  3590  03C2  1903               	skipnz
  3591  03C3  2BA4               	goto	l1668
  3592  03C4  2BC5               	goto	l1676
  3593  03C5                     l1676:	
  3594                           
  3595                           ;SSD.c: 67:     SSD_SetState(ssd, SSD_OFF);
  3596  03C5  01B4               	clrf	SSD_SetState@state
  3597  03C6  083F               	movf	SSD_Init@ssd,w
  3598  03C7  120A  118A  241B  120A  118A  	fcall	_SSD_SetState
  3599  03CC                     l128:	
  3600  03CC  0008               	return
  3601  03CD                     __end_of_SSD_Init:	
  3602                           
  3603                           	psect	text20
  3604  0489                     __ptext20:	
  3605 ;; *************** function _SSD_Out *****************
  3606 ;; Defined at:
  3607 ;;		line 155 in file "SSD.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;  ssd             1    wreg     enum E854
  3610 ;;  ssd_symbol      1    4[BANK0 ] enum E863
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  ssd             1    5[BANK0 ] enum E854
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      void 
  3615 ;; Registers used:
  3616 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3622 ;;      Params:         0       1       0       0       0
  3623 ;;      Locals:         0       1       0       0       0
  3624 ;;      Temps:          0       0       0       0       0
  3625 ;;      Totals:         0       2       0       0       0
  3626 ;;Total ram usage:        2 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    5
  3629 ;; This function calls:
  3630 ;;		_SSD_SetState
  3631 ;; This function is called by:
  3632 ;;		_SSD_Init
  3633 ;;		_SSD_Update
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           
  3638                           ;psect for function _SSD_Out
  3639  0489                     _SSD_Out:	
  3640                           
  3641                           ;incstack = 0
  3642                           ; Regs used in _SSD_Out: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3643                           ;SSD_Out@ssd stored from wreg
  3644  0489  1283               	bcf	3,5	;RP0=0, select bank0
  3645  048A  1303               	bcf	3,6	;RP1=0, select bank0
  3646  048B  00B9               	movwf	SSD_Out@ssd
  3647  048C                     l1634:	
  3648                           
  3649                           ;SSD.c: 155: static void SSD_Out(tSSD ssd, tSSD_Symbol ssd_symbol);SSD.c: 156: {;SSD.c: 
      +                          159:     SSD_SetState(SSD_FIRST, SSD_OFF);
  3650  048C  01B4               	clrf	SSD_SetState@state
  3651  048D  3000               	movlw	0
  3652  048E  120A  118A  241B  120A  118A  	fcall	_SSD_SetState
  3653                           
  3654                           ;SSD.c: 160:     SSD_SetState(SSD_SECONED, SSD_OFF);
  3655  0493  1283               	bcf	3,5	;RP0=0, select bank0
  3656  0494  1303               	bcf	3,6	;RP1=0, select bank0
  3657  0495  01B4               	clrf	SSD_SetState@state
  3658  0496  3001               	movlw	1
  3659  0497  120A  118A  241B  120A  118A  	fcall	_SSD_SetState
  3660                           
  3661                           ;SSD.c: 161:     SSD_SetState(SSD_THIRD, SSD_OFF);
  3662  049C  1283               	bcf	3,5	;RP0=0, select bank0
  3663  049D  1303               	bcf	3,6	;RP1=0, select bank0
  3664  049E  01B4               	clrf	SSD_SetState@state
  3665  049F  3002               	movlw	2
  3666  04A0  120A  118A  241B  120A  118A  	fcall	_SSD_SetState
  3667  04A5                     l1636:	
  3668                           
  3669                           ;SSD.c: 163:     ((((PORTD))) = (SSD_Data[ssd_symbol]));
  3670  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  3671  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  3672  04A7  0838               	movf	SSD_Out@ssd_symbol,w
  3673  04A8  3E41               	addlw	(low (_SSD_Data| 0))& (0+255)
  3674  04A9  0084               	movwf	4
  3675  04AA  1383               	bcf	3,7	;select IRP bank0
  3676  04AB  0800               	movf	0,w
  3677  04AC  0088               	movwf	8	;volatile
  3678  04AD                     l1638:	
  3679                           
  3680                           ;SSD.c: 166:     SSD_SetState(ssd, SSD_ON);
  3681  04AD  01B4               	clrf	SSD_SetState@state
  3682  04AE  0AB4               	incf	SSD_SetState@state,f
  3683  04AF  0839               	movf	SSD_Out@ssd,w
  3684  04B0  120A  118A  241B  120A  118A  	fcall	_SSD_SetState
  3685  04B5                     l160:	
  3686  04B5  0008               	return
  3687  04B6                     __end_of_SSD_Out:	
  3688                           
  3689                           	psect	text21
  3690  041B                     __ptext21:	
  3691 ;; *************** function _SSD_SetState *****************
  3692 ;; Defined at:
  3693 ;;		line 131 in file "SSD.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;  ssd             1    wreg     enum E854
  3696 ;;  state           1    0[BANK0 ] enum E859
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  ssd             1    3[BANK0 ] enum E854
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3708 ;;      Params:         0       1       0       0       0
  3709 ;;      Locals:         0       1       0       0       0
  3710 ;;      Temps:          0       2       0       0       0
  3711 ;;      Totals:         0       4       0       0       0
  3712 ;;Total ram usage:        4 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    4
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_SSD_Init
  3719 ;;		_SSD_Out
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           
  3724                           ;psect for function _SSD_SetState
  3725  041B                     _SSD_SetState:	
  3726                           
  3727                           ;incstack = 0
  3728                           ; Regs used in _SSD_SetState: [wreg-fsr0h+status,2+status,0]
  3729                           ;SSD_SetState@ssd stored from wreg
  3730  041B  1283               	bcf	3,5	;RP0=0, select bank0
  3731  041C  1303               	bcf	3,6	;RP1=0, select bank0
  3732  041D  00B7               	movwf	SSD_SetState@ssd
  3733  041E                     l1598:	
  3734                           
  3735                           ;SSD.c: 131: void SSD_SetState(tSSD ssd, tSSD_State state);SSD.c: 132: {;SSD.c: 134:    
      +                           switch (ssd)
  3736  041E  2C46               	goto	l1608
  3737  041F                     l1600:	
  3738                           
  3739                           ;SSD.c: 137:             ((((PORTB))) = (((PORTB)) & (~(1 << ((7)))))|(state << ((7))));
  3740  041F  0834               	movf	SSD_SetState@state,w
  3741  0420  00B5               	movwf	??_SSD_SetState
  3742  0421  3007               	movlw	7
  3743  0422                     u405:	
  3744  0422  1003               	clrc
  3745  0423  0DB5               	rlf	??_SSD_SetState,f
  3746  0424  3EFF               	addlw	-1
  3747  0425  1D03               	skipz
  3748  0426  2C22               	goto	u405
  3749  0427  0806               	movf	6,w	;volatile
  3750  0428  397F               	andlw	127
  3751  0429  0435               	iorwf	??_SSD_SetState,w
  3752  042A  0086               	movwf	6	;volatile
  3753                           
  3754                           ;SSD.c: 138:             break;
  3755  042B  2C59               	goto	l157
  3756  042C                     l1602:	
  3757                           
  3758                           ;SSD.c: 140:             ((((PORTB))) = (((PORTB)) & (~(1 << ((6)))))|(state << ((6))));
  3759  042C  0834               	movf	SSD_SetState@state,w
  3760  042D  00B5               	movwf	??_SSD_SetState
  3761  042E  3006               	movlw	6
  3762  042F                     u415:	
  3763  042F  1003               	clrc
  3764  0430  0DB5               	rlf	??_SSD_SetState,f
  3765  0431  3EFF               	addlw	-1
  3766  0432  1D03               	skipz
  3767  0433  2C2F               	goto	u415
  3768  0434  0806               	movf	6,w	;volatile
  3769  0435  39BF               	andlw	191
  3770  0436  0435               	iorwf	??_SSD_SetState,w
  3771  0437  0086               	movwf	6	;volatile
  3772                           
  3773                           ;SSD.c: 141:             break;
  3774  0438  2C59               	goto	l157
  3775  0439                     l1604:	
  3776                           
  3777                           ;SSD.c: 143:             ((((PORTB))) = (((PORTB)) & (~(1 << ((5)))))|(state << ((5))));
  3778  0439  0834               	movf	SSD_SetState@state,w
  3779  043A  00B5               	movwf	??_SSD_SetState
  3780  043B  3005               	movlw	5
  3781  043C                     u425:	
  3782  043C  1003               	clrc
  3783  043D  0DB5               	rlf	??_SSD_SetState,f
  3784  043E  3EFF               	addlw	-1
  3785  043F  1D03               	skipz
  3786  0440  2C3C               	goto	u425
  3787  0441  0806               	movf	6,w	;volatile
  3788  0442  39DF               	andlw	223
  3789  0443  0435               	iorwf	??_SSD_SetState,w
  3790  0444  0086               	movwf	6	;volatile
  3791                           
  3792                           ;SSD.c: 144:             break;
  3793  0445  2C59               	goto	l157
  3794  0446                     l1608:	
  3795  0446  0837               	movf	SSD_SetState@ssd,w
  3796  0447  00B5               	movwf	??_SSD_SetState
  3797  0448  01B6               	clrf	??_SSD_SetState+1
  3798                           
  3799                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3800                           ; Switch size 1, requested type "simple"
  3801                           ; Number of cases is 1, Range of values is 0 to 0
  3802                           ; switch strategies available:
  3803                           ; Name         Instructions Cycles
  3804                           ; simple_byte            4     3 (average)
  3805                           ; direct_byte           11     8 (fixed)
  3806                           ; jumptable            260     6 (fixed)
  3807                           ;	Chosen strategy is simple_byte
  3808  0449  0836               	movf	??_SSD_SetState+1,w
  3809  044A  3A00               	xorlw	0	; case 0
  3810  044B  1903               	skipnz
  3811  044C  2C4E               	goto	l2212
  3812  044D  2C59               	goto	l157
  3813  044E                     l2212:	
  3814                           
  3815                           ; Switch size 1, requested type "simple"
  3816                           ; Number of cases is 3, Range of values is 0 to 2
  3817                           ; switch strategies available:
  3818                           ; Name         Instructions Cycles
  3819                           ; simple_byte           10     6 (average)
  3820                           ; direct_byte           17     8 (fixed)
  3821                           ; jumptable            260     6 (fixed)
  3822                           ;	Chosen strategy is simple_byte
  3823  044E  0835               	movf	??_SSD_SetState,w
  3824  044F  3A00               	xorlw	0	; case 0
  3825  0450  1903               	skipnz
  3826  0451  2C1F               	goto	l1600
  3827  0452  3A01               	xorlw	1	; case 1
  3828  0453  1903               	skipnz
  3829  0454  2C2C               	goto	l1602
  3830  0455  3A03               	xorlw	3	; case 2
  3831  0456  1903               	skipnz
  3832  0457  2C39               	goto	l1604
  3833  0458  2C59               	goto	l157
  3834  0459                     l157:	
  3835  0459  0008               	return
  3836  045A                     __end_of_SSD_SetState:	
  3837                           
  3838                           	psect	text22
  3839  04DB                     __ptext22:	
  3840 ;; *************** function _Generic_ISR *****************
  3841 ;; Defined at:
  3842 ;;		line 82 in file "main.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;		None
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;		None
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  1    wreg      void 
  3849 ;; Registers used:
  3850 ;;		wreg, status,2, status,0, pclath, cstack
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3856 ;;      Params:         0       0       0       0       0
  3857 ;;      Locals:         0       0       0       0       0
  3858 ;;      Temps:          2       0       0       0       0
  3859 ;;      Totals:         2       0       0       0       0
  3860 ;;Total ram usage:        2 bytes
  3861 ;; Hardware stack levels used:    1
  3862 ;; Hardware stack levels required when called:    3
  3863 ;; This function calls:
  3864 ;;		_TMR0_CheckOverFlow
  3865 ;;		_TMR0_ISR
  3866 ;;		_TMR1_CheckOverflow
  3867 ;;		_TMR1_ISR
  3868 ;; This function is called by:
  3869 ;;		Interrupt level 1
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           
  3874                           ;psect for function _Generic_ISR
  3875  04DB                     _Generic_ISR:	
  3876  04DB                     i1l2010:	
  3877                           
  3878                           ;main.c: 86:     if(TMR1_CheckOverflow())
  3879  04DB  120A  118A  264D  120A  118A  	fcall	_TMR1_CheckOverflow
  3880  04E0  3A00               	xorlw	0
  3881  04E1  1903               	skipnz
  3882  04E2  2CE4               	goto	u77_21
  3883  04E3  2CE5               	goto	u77_20
  3884  04E4                     u77_21:	
  3885  04E4  2CEA               	goto	i1l2014
  3886  04E5                     u77_20:	
  3887  04E5                     i1l2012:	
  3888                           
  3889                           ;main.c: 87:     {;main.c: 88:         TMR1_ISR();
  3890  04E5  120A  118A  2623  120A  118A  	fcall	_TMR1_ISR
  3891  04EA                     i1l2014:	
  3892                           
  3893                           ;main.c: 94:     if(TMR0_CheckOverFlow())
  3894  04EA  120A  118A  265B  120A  118A  	fcall	_TMR0_CheckOverFlow
  3895  04EF  3A00               	xorlw	0
  3896  04F0  1903               	skipnz
  3897  04F1  2CF3               	goto	u78_21
  3898  04F2  2CF4               	goto	u78_20
  3899  04F3                     u78_21:	
  3900  04F3  2CF9               	goto	i1l52
  3901  04F4                     u78_20:	
  3902  04F4                     i1l2016:	
  3903                           
  3904                           ;main.c: 95:     {;main.c: 96:         TMR0_ISR();
  3905  04F4  120A  118A  257B  120A  118A  	fcall	_TMR0_ISR
  3906  04F9                     i1l52:	
  3907  04F9  087B               	movf	??_Generic_ISR+1,w
  3908  04FA  008A               	movwf	10
  3909  04FB  0E7A               	swapf	??_Generic_ISR^(0+4294967168),w
  3910  04FC  0083               	movwf	3
  3911  04FD  0EFE               	swapf	btemp,f
  3912  04FE  0E7E               	swapf	btemp,w
  3913  04FF  0009               	retfie
  3914  0500                     __end_of_Generic_ISR:	
  3915                           
  3916                           	psect	intentry
  3917  0004                     __pintentry:	
  3918                           ;incstack = 0
  3919                           ; Regs used in _Generic_ISR: [wreg+status,2+status,0+pclath+cstack]
  3920                           
  3921  0004                     interrupt_function:	
  3922  007E                     saved_w	set	btemp
  3923  0004  00FE               	movwf	btemp
  3924  0005  0E03               	swapf	3,w
  3925  0006  00FA               	movwf	??_Generic_ISR
  3926  0007  080A               	movf	10,w
  3927  0008  00FB               	movwf	??_Generic_ISR+1
  3928  0009  120A  118A  2CDB   	ljmp	_Generic_ISR
  3929                           
  3930                           	psect	text23
  3931  0623                     __ptext23:	
  3932 ;; *************** function _TMR1_ISR *****************
  3933 ;; Defined at:
  3934 ;;		line 55 in file "TIMER1.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;		None
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;		None
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  1    wreg      void 
  3941 ;; Registers used:
  3942 ;;		wreg, status,2, status,0, pclath, cstack
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3948 ;;      Params:         0       0       0       0       0
  3949 ;;      Locals:         0       0       0       0       0
  3950 ;;      Temps:          0       0       0       0       0
  3951 ;;      Totals:         0       0       0       0       0
  3952 ;;Total ram usage:        0 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:    1
  3955 ;; This function calls:
  3956 ;;		_Firing_Pulse
  3957 ;; This function is called by:
  3958 ;;		_Generic_ISR
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           
  3963                           ;psect for function _TMR1_ISR
  3964  0623                     _TMR1_ISR:	
  3965  0623                     i1l1328:	
  3966                           ;incstack = 0
  3967                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  3968                           
  3969                           
  3970                           ;TIMER1.c: 58:     Firing_Pulse();
  3971  0623  120A  118A  25FB  120A  118A  	fcall	_Firing_Pulse
  3972  0628                     i1l1330:	
  3973                           
  3974                           ;TIMER1.c: 62:     (TMR1ON = 0);
  3975  0628  1283               	bcf	3,5	;RP0=0, select bank0
  3976  0629  1303               	bcf	3,6	;RP1=0, select bank0
  3977  062A  1010               	bcf	16,0	;volatile
  3978  062B                     i1l1332:	
  3979                           
  3980                           ;TIMER1.c: 65:     (TMR1IF = 0);
  3981  062B  100C               	bcf	12,0	;volatile
  3982  062C                     i1l354:	
  3983  062C  0008               	return
  3984  062D                     __end_of_TMR1_ISR:	
  3985                           
  3986                           	psect	text24
  3987  05FB                     __ptext24:	
  3988 ;; *************** function _Firing_Pulse *****************
  3989 ;; Defined at:
  3990 ;;		line 189 in file "Motor.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;		None
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;		None
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg, status,2
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4004 ;;      Params:         0       0       0       0       0
  4005 ;;      Locals:         0       0       0       0       0
  4006 ;;      Temps:          1       0       0       0       0
  4007 ;;      Totals:         1       0       0       0       0
  4008 ;;Total ram usage:        1 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; This function calls:
  4011 ;;		Nothing
  4012 ;; This function is called by:
  4013 ;;		_TMR1_ISR
  4014 ;; This function uses a non-reentrant model
  4015 ;;
  4016                           
  4017                           
  4018                           ;psect for function _Firing_Pulse
  4019  05FB                     _Firing_Pulse:	
  4020  05FB                     i1l1116:	
  4021                           ;incstack = 0
  4022                           ; Regs used in _Firing_Pulse: [wreg+status,2]
  4023                           
  4024                           
  4025                           ;Motor.c: 192:     ((((PORTC))) = (((PORTC)) & (~(1 << ((3)))))|(1 << ((3))));
  4026  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  4027  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  4028  05FD  0807               	movf	7,w	;volatile
  4029  05FE  39F7               	andlw	247
  4030  05FF  3808               	iorlw	8
  4031  0600  0087               	movwf	7	;volatile
  4032  0601                     i1l1118:	
  4033                           
  4034                           ;Motor.c: 194:     _delay((unsigned long)(((100))*(8000000/4000000.0)));
  4035  0601  3042               	movlw	66
  4036  0602  00F0               	movwf	??_Firing_Pulse
  4037  0603                     u79_27:	
  4038  0603  0BF0               	decfsz	??_Firing_Pulse,f
  4039  0604  2E03               	goto	u79_27
  4040  0605  0000               	nop
  4041  0606                     i1l1120:	
  4042                           
  4043                           ;Motor.c: 196:      ((((PORTC))) = (((PORTC)) & (~(1 << ((3)))))|(0 << ((3))));
  4044  0606  1283               	bcf	3,5	;RP0=0, select bank0
  4045  0607  1303               	bcf	3,6	;RP1=0, select bank0
  4046  0608  0807               	movf	7,w	;volatile
  4047  0609  39F7               	andlw	247
  4048  060A  0087               	movwf	7	;volatile
  4049  060B                     i1l280:	
  4050  060B  0008               	return
  4051  060C                     __end_of_Firing_Pulse:	
  4052                           
  4053                           	psect	text25
  4054  064D                     __ptext25:	
  4055 ;; *************** function _TMR1_CheckOverflow *****************
  4056 ;; Defined at:
  4057 ;;		line 48 in file "TIMER1.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;		None
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;		None
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  1    wreg      unsigned char 
  4064 ;; Registers used:
  4065 ;;		wreg
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4071 ;;      Params:         0       0       0       0       0
  4072 ;;      Locals:         0       0       0       0       0
  4073 ;;      Temps:          0       0       0       0       0
  4074 ;;      Totals:         0       0       0       0       0
  4075 ;;Total ram usage:        0 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; This function calls:
  4078 ;;		Nothing
  4079 ;; This function is called by:
  4080 ;;		_Generic_ISR
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           
  4085                           ;psect for function _TMR1_CheckOverflow
  4086  064D                     _TMR1_CheckOverflow:	
  4087  064D                     i1l1324:	
  4088                           ;incstack = 0
  4089                           ; Regs used in _TMR1_CheckOverflow: [wreg]
  4090                           
  4091                           
  4092                           ;TIMER1.c: 51:      return (TMR1IF);
  4093  064D  3000               	movlw	0
  4094  064E  1283               	bcf	3,5	;RP0=0, select bank0
  4095  064F  1303               	bcf	3,6	;RP1=0, select bank0
  4096  0650  180C               	btfsc	12,0	;volatile
  4097  0651  3001               	movlw	1
  4098  0652                     i1l351:	
  4099  0652  0008               	return
  4100  0653                     __end_of_TMR1_CheckOverflow:	
  4101                           
  4102                           	psect	text26
  4103  057B                     __ptext26:	
  4104 ;; *************** function _TMR0_ISR *****************
  4105 ;; Defined at:
  4106 ;;		line 49 in file "Timer.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;		None
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;		None
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  1    wreg      void 
  4113 ;; Registers used:
  4114 ;;		wreg, status,2, status,0, pclath, cstack
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4120 ;;      Params:         0       0       0       0       0
  4121 ;;      Locals:         0       0       0       0       0
  4122 ;;      Temps:          2       0       0       0       0
  4123 ;;      Totals:         2       0       0       0       0
  4124 ;;Total ram usage:        2 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:    2
  4127 ;; This function calls:
  4128 ;;		_Get_actual
  4129 ;;		_TMR1_Start
  4130 ;; This function is called by:
  4131 ;;		_Generic_ISR
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           
  4136                           ;psect for function _TMR0_ISR
  4137  057B                     _TMR0_ISR:	
  4138  057B                     i1l1968:	
  4139                           ;incstack = 0
  4140                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  4141                           
  4142                           
  4143                           ;Timer.c: 56:     TMR1_Start(Get_actual());
  4144  057B  120A  118A  2657  120A  118A  	fcall	_Get_actual
  4145  0580  00F8               	movwf	??_TMR0_ISR
  4146  0581  01F9               	clrf	??_TMR0_ISR+1
  4147  0582  0878               	movf	??_TMR0_ISR,w
  4148  0583  00F6               	movwf	TMR1_Start@Degree
  4149  0584  0879               	movf	??_TMR0_ISR+1,w
  4150  0585  00F7               	movwf	TMR1_Start@Degree+1
  4151  0586  120A  118A  2525  120A  118A  	fcall	_TMR1_Start
  4152  058B                     i1l1970:	
  4153                           
  4154                           ;Timer.c: 60:  (TMR0IF = 0);
  4155  058B  110B               	bcf	11,2	;volatile
  4156  058C                     i1l1972:	
  4157                           
  4158                           ;Timer.c: 63:  (TMR0 = 256 - ((78)));
  4159  058C  30B2               	movlw	178
  4160  058D  1283               	bcf	3,5	;RP0=0, select bank0
  4161  058E  1303               	bcf	3,6	;RP1=0, select bank0
  4162  058F  0081               	movwf	1	;volatile
  4163  0590                     i1l1974:	
  4164                           
  4165                           ;Timer.c: 66:     ISR_FLAG = 1;
  4166  0590  3001               	movlw	1
  4167  0591  00F8               	movwf	??_TMR0_ISR
  4168  0592  0878               	movf	??_TMR0_ISR,w
  4169  0593  00B3               	movwf	_ISR_FLAG	;volatile
  4170  0594                     i1l319:	
  4171  0594  0008               	return
  4172  0595                     __end_of_TMR0_ISR:	
  4173                           
  4174                           	psect	text27
  4175  0525                     __ptext27:	
  4176 ;; *************** function _TMR1_Start *****************
  4177 ;; Defined at:
  4178 ;;		line 28 in file "TIMER1.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;  Degree          2    6[COMMON] unsigned int 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;		None
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  1    wreg      void 
  4185 ;; Registers used:
  4186 ;;		wreg, status,2, status,0, pclath, cstack
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4192 ;;      Params:         2       0       0       0       0
  4193 ;;      Locals:         0       0       0       0       0
  4194 ;;      Temps:          0       0       0       0       0
  4195 ;;      Totals:         2       0       0       0       0
  4196 ;;Total ram usage:        2 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:    1
  4199 ;; This function calls:
  4200 ;;		i1___wmul
  4201 ;; This function is called by:
  4202 ;;		_TMR0_ISR
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           
  4207                           ;psect for function _TMR1_Start
  4208  0525                     _TMR1_Start:	
  4209  0525                     i1l1768:	
  4210                           ;incstack = 0
  4211                           ; Regs used in _TMR1_Start: [wreg+status,2+status,0+pclath+cstack]
  4212                           
  4213                           
  4214                           ;TIMER1.c: 28: void TMR1_Start(uint16 Degree);TIMER1.c: 29: {;TIMER1.c: 31:     (TMR1IF 
      +                          = 0);
  4215  0525  1283               	bcf	3,5	;RP0=0, select bank0
  4216  0526  1303               	bcf	3,6	;RP1=0, select bank0
  4217  0527  100C               	bcf	12,0	;volatile
  4218  0528                     i1l1770:	
  4219                           
  4220                           ;TIMER1.c: 33:     (TMR1 =65536 - ((Degree)*55));
  4221  0528  0877               	movf	TMR1_Start@Degree+1,w
  4222  0529  00F1               	movwf	i1___wmul@multiplier+1
  4223  052A  0876               	movf	TMR1_Start@Degree,w
  4224  052B  00F0               	movwf	i1___wmul@multiplier
  4225  052C  30C9               	movlw	201
  4226  052D  00F2               	movwf	i1___wmul@multiplicand
  4227  052E  30FF               	movlw	255
  4228  052F  00F3               	movwf	i1___wmul@multiplicand+1
  4229  0530  120A  118A  2500  120A  118A  	fcall	i1___wmul
  4230  0535  0871               	movf	?i1___wmul+1,w
  4231  0536  1283               	bcf	3,5	;RP0=0, select bank0
  4232  0537  1303               	bcf	3,6	;RP1=0, select bank0
  4233  0538  008F               	movwf	15	;volatile
  4234  0539  0870               	movf	?i1___wmul,w
  4235  053A  008E               	movwf	14	;volatile
  4236  053B                     i1l1772:	
  4237                           
  4238                           ;TIMER1.c: 36:     (TMR1IE = 1);
  4239  053B  1683               	bsf	3,5	;RP0=1, select bank1
  4240  053C  1303               	bcf	3,6	;RP1=0, select bank1
  4241  053D  140C               	bsf	12,0	;volatile
  4242  053E                     i1l1774:	
  4243                           
  4244                           ;TIMER1.c: 37:     (PEIE = 1);
  4245  053E  170B               	bsf	11,6	;volatile
  4246  053F                     i1l1776:	
  4247                           
  4248                           ;TIMER1.c: 40:     (TMR1ON = 1) ;
  4249  053F  1283               	bcf	3,5	;RP0=0, select bank0
  4250  0540  1303               	bcf	3,6	;RP1=0, select bank0
  4251  0541  1410               	bsf	16,0	;volatile
  4252  0542                     i1l345:	
  4253  0542  0008               	return
  4254  0543                     __end_of_TMR1_Start:	
  4255                           
  4256                           	psect	text28
  4257  0500                     __ptext28:	
  4258 ;; *************** function i1___wmul *****************
  4259 ;; Defined at:
  4260 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  multiplier      2    0[COMMON] unsigned int 
  4263 ;;  multiplicand    2    2[COMMON] unsigned int 
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;  __wmul          2    4[COMMON] unsigned int 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  2    0[COMMON] unsigned int 
  4268 ;; Registers used:
  4269 ;;		wreg, status,2, status,0
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4275 ;;      Params:         4       0       0       0       0
  4276 ;;      Locals:         2       0       0       0       0
  4277 ;;      Temps:          0       0       0       0       0
  4278 ;;      Totals:         6       0       0       0       0
  4279 ;;Total ram usage:        6 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_TMR1_Start
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function i1___wmul
  4290  0500                     i1___wmul:	
  4291  0500                     i1l1640:	
  4292                           ;incstack = 0
  4293                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  4294                           
  4295  0500  01F4               	clrf	i1___wmul@product
  4296  0501  01F5               	clrf	i1___wmul@product+1
  4297  0502                     i1l1642:	
  4298  0502  1C70               	btfss	i1___wmul@multiplier,0
  4299  0503  2D05               	goto	u45_21
  4300  0504  2D06               	goto	u45_20
  4301  0505                     u45_21:	
  4302  0505  2D0C               	goto	i1l440
  4303  0506                     u45_20:	
  4304  0506                     i1l1644:	
  4305  0506  0872               	movf	i1___wmul@multiplicand,w
  4306  0507  07F4               	addwf	i1___wmul@product,f
  4307  0508  1803               	skipnc
  4308  0509  0AF5               	incf	i1___wmul@product+1,f
  4309  050A  0873               	movf	i1___wmul@multiplicand+1,w
  4310  050B  07F5               	addwf	i1___wmul@product+1,f
  4311  050C                     i1l440:	
  4312  050C  3001               	movlw	1
  4313  050D                     u46_25:	
  4314  050D  1003               	clrc
  4315  050E  0DF2               	rlf	i1___wmul@multiplicand,f
  4316  050F  0DF3               	rlf	i1___wmul@multiplicand+1,f
  4317  0510  3EFF               	addlw	-1
  4318  0511  1D03               	skipz
  4319  0512  2D0D               	goto	u46_25
  4320  0513                     i1l1646:	
  4321  0513  3001               	movlw	1
  4322  0514                     u47_25:	
  4323  0514  1003               	clrc
  4324  0515  0CF1               	rrf	i1___wmul@multiplier+1,f
  4325  0516  0CF0               	rrf	i1___wmul@multiplier,f
  4326  0517  3EFF               	addlw	-1
  4327  0518  1D03               	skipz
  4328  0519  2D14               	goto	u47_25
  4329  051A                     i1l1648:	
  4330  051A  0870               	movf	i1___wmul@multiplier,w
  4331  051B  0471               	iorwf	i1___wmul@multiplier+1,w
  4332  051C  1D03               	btfss	3,2
  4333  051D  2D1F               	goto	u48_21
  4334  051E  2D20               	goto	u48_20
  4335  051F                     u48_21:	
  4336  051F  2D02               	goto	i1l1642
  4337  0520                     u48_20:	
  4338  0520                     i1l1650:	
  4339  0520  0875               	movf	i1___wmul@product+1,w
  4340  0521  00F1               	movwf	?i1___wmul+1
  4341  0522  0874               	movf	i1___wmul@product,w
  4342  0523  00F0               	movwf	?i1___wmul
  4343  0524                     i1l442:	
  4344  0524  0008               	return
  4345  0525                     __end_ofi1___wmul:	
  4346                           
  4347                           	psect	text29
  4348  0657                     __ptext29:	
  4349 ;; *************** function _Get_actual *****************
  4350 ;; Defined at:
  4351 ;;		line 183 in file "Motor.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;		None
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;		None
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  1    wreg      unsigned char 
  4358 ;; Registers used:
  4359 ;;		wreg
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4365 ;;      Params:         0       0       0       0       0
  4366 ;;      Locals:         0       0       0       0       0
  4367 ;;      Temps:          0       0       0       0       0
  4368 ;;      Totals:         0       0       0       0       0
  4369 ;;Total ram usage:        0 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_TMR0_ISR
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           
  4379                           ;psect for function _Get_actual
  4380  0657                     _Get_actual:	
  4381  0657                     i1l1764:	
  4382                           ;incstack = 0
  4383                           ; Regs used in _Get_actual: [wreg]
  4384                           
  4385                           
  4386                           ;Motor.c: 185:     return Actual_angle;
  4387  0657  1283               	bcf	3,5	;RP0=0, select bank0
  4388  0658  1303               	bcf	3,6	;RP1=0, select bank0
  4389  0659  084B               	movf	_Actual_angle,w
  4390  065A                     i1l277:	
  4391  065A  0008               	return
  4392  065B                     __end_of_Get_actual:	
  4393                           
  4394                           	psect	text30
  4395  065B                     __ptext30:	
  4396 ;; *************** function _TMR0_CheckOverFlow *****************
  4397 ;; Defined at:
  4398 ;;		line 36 in file "Timer.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      unsigned char 
  4405 ;; Registers used:
  4406 ;;		wreg
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4412 ;;      Params:         0       0       0       0       0
  4413 ;;      Locals:         0       0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0
  4415 ;;      Totals:         0       0       0       0       0
  4416 ;;Total ram usage:        0 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; This function calls:
  4419 ;;		Nothing
  4420 ;; This function is called by:
  4421 ;;		_Generic_ISR
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           
  4426                           ;psect for function _TMR0_CheckOverFlow
  4427  065B                     _TMR0_CheckOverFlow:	
  4428  065B                     i1l1334:	
  4429                           ;incstack = 0
  4430                           ; Regs used in _TMR0_CheckOverFlow: [wreg]
  4431                           
  4432                           
  4433                           ;Timer.c: 39:  return (TMR0IF);
  4434  065B  3000               	movlw	0
  4435  065C  190B               	btfsc	11,2	;volatile
  4436  065D  3001               	movlw	1
  4437  065E                     i1l313:	
  4438  065E  0008               	return
  4439  065F                     __end_of_TMR0_CheckOverFlow:	
  4440  007E                     btemp	set	126	;btemp
  4441  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        9
    BSS         21
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     13      45
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Generic_ISR in COMMON

    _Generic_ISR->_TMR0_ISR
    _TMR1_ISR->_Firing_Pulse
    _TMR0_ISR->_TMR1_Start
    _TMR1_Start->i1___wmul

Critical Paths under _main in BANK0

    _main->_DISP_Init
    _VC_update->_handling_switch_events
    _handling_switch_events->_SW_GetState
    _SW_GetState->___bmul
    _VC_Init->_MOT_Init
    _SW_Update->___bmul
    _SW_Init->___bmul
    _SSD_Update->_SSD_Out
    _DISP_Update->_SSD_SetValue
    _DISP_Init->_SSD_Init
    _SSD_Init->_SSD_Out
    _SSD_Out->_SSD_SetState

Critical Paths under _Generic_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Generic_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Generic_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Generic_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5388
                          _DISP_Init
                        _DISP_Update
                         _MOT_Update
                         _SSD_Update
                            _SW_Init
                          _SW_Update
                          _TMR0_Init
                         _TMR0_Start
                          _TMR1_Init
                            _VC_Init
                          _VC_update
 ---------------------------------------------------------------------------------
 (1) _VC_update                                            1     1      0     678
                                              8 BANK0      1     1      0
                 _MOT_SetTargetAngle
             _handling_switch_events
 ---------------------------------------------------------------------------------
 (2) _handling_switch_events                               2     2      0     634
                                              6 BANK0      2     2      0
                        _SW_GetState
 ---------------------------------------------------------------------------------
 (3) _SW_GetState                                          2     2      0     634
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _MOT_SetTargetAngle                                   2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _VC_Init                                              2     2      0      66
                                              2 BANK0      2     2      0
                           _MOT_Init
 ---------------------------------------------------------------------------------
 (2) _MOT_Init                                             2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _TMR1_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SW_Update                                            4     4      0    1077
                                              4 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _SW_Init                                              2     2      0     725
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     612
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _SSD_Update                                           1     1      0     664
                                              6 BANK0      1     1      0
                            _SSD_Out
 ---------------------------------------------------------------------------------
 (1) _MOT_Update                                           2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DISP_Update                                          2     2      0     728
                                              3 BANK0      2     2      0
                       _SSD_SetValue
                        _VC_GetSpeed
 ---------------------------------------------------------------------------------
 (2) _VC_GetSpeed                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SSD_SetValue                                         3     2      1     728
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _DISP_Init                                            1     1      0    1450
                                             12 BANK0      1     1      0
                           _SSD_Init
 ---------------------------------------------------------------------------------
 (2) _SSD_Init                                             6     5      1    1450
                                              6 BANK0      6     5      1
                            _SSD_Out
                       _SSD_SetState
 ---------------------------------------------------------------------------------
 (2) _SSD_Out                                              2     1      1     664
                                              4 BANK0      2     1      1
                       _SSD_SetState
 ---------------------------------------------------------------------------------
 (3) _SSD_SetState                                         4     3      1     468
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Generic_ISR                                          2     2      0     242
                                             10 COMMON     2     2      0
                 _TMR0_CheckOverFlow
                           _TMR0_ISR
                 _TMR1_CheckOverflow
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0       0
                       _Firing_Pulse
 ---------------------------------------------------------------------------------
 (7) _Firing_Pulse                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _TMR1_CheckOverflow                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             2     2      0     242
                                              8 COMMON     2     2      0
                         _Get_actual
                         _TMR1_Start
 ---------------------------------------------------------------------------------
 (7) _TMR1_Start                                           2     0      2     242
                                              6 COMMON     2     0      2
                         _Get_actual (ARG)
                           i1___wmul
 ---------------------------------------------------------------------------------
 (8) i1___wmul                                             6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) _Get_actual                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_CheckOverFlow                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DISP_Init
     _SSD_Init
       _SSD_Out
         _SSD_SetState
       _SSD_SetState
   _DISP_Update
     _SSD_SetValue
     _VC_GetSpeed
   _MOT_Update
   _SSD_Update
     _SSD_Out
       _SSD_SetState
   _SW_Init
     ___bmul
   _SW_Update
     ___bmul
   _TMR0_Init
   _TMR0_Start
   _TMR1_Init
   _VC_Init
     _MOT_Init
   _VC_update
     _MOT_SetTargetAngle
     _handling_switch_events
       _SW_GetState
         ___bmul

 _Generic_ISR (ROOT)
   _TMR0_CheckOverFlow
   _TMR0_ISR
     _Get_actual
     _TMR1_Start
       _Get_actual (ARG)
       i1___wmul (ARG)
   _TMR1_CheckOverflow
   _TMR1_ISR
     _Firing_Pulse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      2D       5       56.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3B      12        0.0%
ABS                  0      0      3B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Jan 19 03:58:36 2020

                     _SSD_Values 0045                                pc 0002                       _SSD_Update 045A  
                 ___bmul@product 0036                      _VC_GetSpeed 0653                      __CFG_CP$OFF 0000  
            __end_of_SW_GetState 05EA                               l63 041A                               l72 01B0  
                             l66 05E9                               l76 00BF                               fsr 0004  
               i1___wmul@product 0074                     _SSD_SetValue 060C                 _PRESSURE_COUNTER 002B  
                   _SSD_SetState 041B                              l134 0488                              l310 0622  
                            l223 04DA                              l207 024D                              l160 04B5  
                            l128 03CC                              l139 0617                              l307 064C  
                            l252 05AD                              l157 0459                              l229 02D6  
                            l342 0644                              l273 05F4                              l185 055E  
                            l258 037D                              l274 05FA                              l179 057A  
                            l188 0656                              l466 05C4                              _GIE 005F  
                            u500 01E7                              u405 0422                              u501 01E6  
                            u430 05B6                              u510 0212                              _PS0 0408  
                            u415 042F                              u431 05B5                              u511 0211  
                            _PS1 0409                              u440 05C3                              u600 00A2  
                            u520 0223                              _PS2 040A                              u425 043C  
                            u441 05C2                              u601 00A1                              u521 0222  
                            u530 05F3                     __CFG_CPD$OFF 0000                              u531 05F2  
                            u540 041A                              u620 00D2                              u700 054F  
                            u541 0419                              u621 00D1                              u701 054E  
                            u710 0337                              u550 0469                              u630 00E6  
                            u711 0336                              u551 0468                              u631 00E5  
                            u615 00A5                              u720 0340                              u560 0482  
                            u640 010A                              u721 033F                              u561 0481  
                            u641 0109                              u730 034E                              u650 0132  
                            u570 003F                              u490 01BC                              u731 034D  
                            u651 0131                              u571 003E                              u491 01BB  
                            u740 035E                              u660 0146                              u580 006A  
                            u741 035D                              u661 0145                              u581 0069  
                            u750 0364                              u670 016E                              u590 0084  
                            u751 0363                              u671 016D                              u591 0083  
                            _PSA 040B                              u680 01B0                              u760 0308  
                            u681 01AF                              u761 0307                              u690 025D  
                            u691 025C                   ??_Firing_Pulse 0070                              fsr0 0004  
                            indf 0000              SW_Update@SW_counter 002F                     __CFG_FOSC$XT 0000  
                    _SSD_current 0032                     __CFG_LVP$OFF 0000                             l2000 0310  
                           l2002 0315                             l2004 031A                             l2006 031F  
                           l2200 01FC                             l2008 0324                             l2210 03BA  
                           l2202 0239                             l2212 044E                             l2204 0196  
                           l2206 0375                             l1600 041F                             l2208 02CB  
                           l1602 042C                             l1604 0439                             l1620 05B6  
                           l1700 01BD                             l1622 05BA                             l1630 05DB  
                           l1702 01C2                             l1608 0446                             l1624 05BC  
                           l1616 05B1                             l1800 063D                             l1712 01E8  
                           l1720 0207                             l1634 048C                             l1802 04B6  
                           l1626 05C3                             l1618 05B2                             l1810 03D7  
                           l1730 0227                             l1722 0212                             l1714 01ED  
                           l1706 01C7                             l1636 04A5                             l1660 0391  
                           l1900 024E                             l1820 040E                             l1812 03DB  
                           l1804 03CD                             l1740 0248                             l1732 022C  
                           l1724 021A                             l1708 01DC                             l1638 04AD  
                           l1670 03A9                             l1662 0396                             l1654 0381  
                           l1910 0281                             l1902 0256                             l1830 046A  
                           l1822 0414                             l1806 03CD                             l1718 01F2  
                           l2198 01D1                             l1664 039A                             l1656 0381  
                           l1760 0653                             l1912 029F                             l1832 046C  
                           l1824 045A                             l1808 03D3                             l1840 0030  
                           l1736 0231                             l1728 0224                             l1666 039F  
                           l1674 03B0                             l1658 0384                             l1906 025E  
                           l1834 047A                             l1826 0462                             l1818 03DE  
                           l1842 0030                             l1690 05A6                             l1754 05ED  
                           l1738 0244                             l1930 0556                             l1922 0543  
                           l1668 03A4                             l1676 03C5                             l1684 060F  
                           l1908 0261                             l1916 02BD                             l1940 0340  
                           l1932 032B                             l1836 0482                             l1860 007F  
                           l1844 0038                             l1692 05AA                             l1780 0566  
                           l1598 041E                             l1950 0354                             l1942 0343  
                           l1838 0484                             l1870 00D2                             l1862 0084  
                           l1854 0043                             l1790 0618                             l1694 05AC  
                           l1686 0598                             l1782 056C                             l1758 05F6  
                           l1926 0550                             l1952 035E                             l1944 0348  
                           l1936 0338                             l1880 0132                             l1872 00E6  
                           l1864 009C                             l1856 0065                             l1848 0040  
                           l1792 0619                             l1688 05A0                             l1784 0571  
                           l1696 01B1                             l1928 0551                             l1954 0364  
                           l1946 034E                             l1938 033A                             l1962 036D  
                           l1882 0146                             l1874 00F8                             l1866 00A2  
                           l1890 017F                             l1858 006A                             l1794 061D  
                           l1786 0576                             l1778 0562                             l1956 0369  
                           l1948 0352                             l1884 015C                             l1876 010A  
                           l1892 01A4                             l1868 00C0                             l1788 0645  
                           l1796 061E                             l1980 02E0                             l1958 036B  
                           l1894 01AA                             l1886 016E                             l1878 0120  
                           l1798 061F                             l1990 02F9                             l1982 02E5  
                           l1992 02FE                             l1984 02EA                             l1976 02D7  
                           l1994 0303                             l1986 02EF                             l1978 02DA  
                           l1996 0308                             l1988 02F4                             l1998 030B  
             __size_of_DISP_Init 0025                             _T0CS 040D                             _PEIE 005E  
                           i1l52 04F9                             _TMR0 0001                             _TMR1 000E  
                   __CFG_WRT$OFF 0000                             _main 02D7                             btemp 007E  
                __end_of_SSD_Out 04B6                  __end_of_VC_Init 057B                             start 000C  
            __end_of_Generic_ISR 0500                  __end_of_SW_Init 041B                ___bmul@multiplier 0037  
                          ?_main 0070                    __CFG_WDTE$OFF 0000                       _Get_actual 0657  
                          i1l313 065E                            i1l319 0594                            i1l351 0652  
                          i1l440 050C                            i1l280 060B                            i1l345 0542  
                          i1l442 0524                            i1l354 062C                            i1l277 065A  
                          _PORTB 0006                            _PORTC 0007                            _PORTD 0008  
                          u45_20 0506                            u45_21 0505                            u46_25 050D  
                          u47_25 0514                            u48_20 0520                            u48_21 051F  
                          _TRISB 0086                            _TRISC 0087                            _TRISD 0088  
                          u77_20 04E5                            u77_21 04E4                            u78_20 04F4  
                          u78_21 04F3                            u79_27 0603                 __end_of_TMR0_ISR 0595  
               __end_of_TMR1_ISR 062D                 __end_of_MOT_Init 05AE               __size_of_TMR0_Init 0008  
             __size_of_TMR1_Init 0008                      ?_TMR0_Start 0070                      ?_TMR1_Start 0076  
                    ?_MOT_Update 0070                 __end_of_SSD_Init 03CD                   __CFG_BOREN$OFF 0000  
                          pclath 000A                 __end_ofi1___wmul 0525               _TMR1_CheckOverflow 064D  
                          status 0003              i1___wmul@multiplier 0070                            wtemp0 007E  
              _Switching_Counter 007C                      _SW_GetState 05D8                  __initialization 000F  
            ?_TMR1_CheckOverflow 0070                     __end_of_main 032B                      ?_SSD_Update 0070  
              __end_of_DISP_Init 04DB               __size_of_VC_update 001C                           ??_main 0041  
             __size_of_SW_Update 0181                   SW_Update@index 003B             ??_TMR1_CheckOverflow 0070  
                      ??_SSD_Out 0039                        ??_VC_Init 0036          ?_handling_switch_events 0070  
                    _Generic_ISR 04DB                           i1l1120 0606                           i1l2010 04DB  
                         i1l1116 05FB                           i1l2012 04E5                           i1l1118 0601  
                         i1l2014 04EA                           i1l2016 04F4                           i1l1330 0628  
                         i1l1324 064D                           i1l1332 062B                           i1l1334 065B  
                         i1l1328 0623                           i1l1640 0500                           i1l1650 0520  
                         i1l1642 0502                           i1l1644 0506                           i1l1646 0513  
                         i1l1648 051A                           i1l1770 0528                           i1l1764 0657  
                         i1l1772 053B                           i1l1774 053E                           i1l1776 053F  
                         i1l1768 0525                           i1l1970 058B                           i1l1972 058C  
                         i1l1974 0590                           i1l1968 057B             __size_of_DISP_Update 0089  
                      ??_SW_Init 0038                           _TMR0IE 005D                           _TMR0IF 005A  
                         _TMR1IE 0460                           _TMR1IF 0060                           _TMR1CS 0081  
                         _TMR1ON 0080                   __CFG_PWRTE$OFF 0000             __end_of_Firing_Pulse 060C  
                         ___bmul 05AE       __end_of_MOT_SetTargetAngle 05FB                __end_of_TMR0_Init 064D  
              __end_of_TMR1_Init 0645              __size_of_TMR0_Start 000B              __size_of_TMR1_Start 001E  
                   _Actual_angle 004B              __size_of_MOT_Update 0053                     VC_Init@speed 0037  
                    ?_Get_actual 0070                     __pdataCOMMON 007D      __size_of_TMR0_CheckOverFlow 0004  
                         saved_w 007E   __end_of_handling_switch_events 024E              __size_of_SSD_Update 002F  
              __end_of_VC_update 055F          __end_of__initialization 002C                __end_of_SW_Update 01B1  
            ___bmul@multiplicand 0034                   __pcstackCOMMON 0070              MOT_SetTargetAngle@M 0035  
                   __pidataBANK0 062D                        ?_TMR0_ISR 0070                        ?_TMR1_ISR 0070  
                      ?_MOT_Init 0070                     ?_VC_GetSpeed 0070                        ?_SSD_Init 003A  
                      ?i1___wmul 0070           SSD_SetValue@ssd_symbol 0034                    SW_GetState@sw 0039  
                     __pbssBANK0 0020              __size_of_Get_actual 0004                       __pmaintext 02D7  
                        ?___bmul 0034                       ??_TMR0_ISR 0078                       ??_TMR1_ISR 0071  
                     ??_MOT_Init 0034                       __pintentry 0004                       ??_SSD_Init 003B  
                     ??i1___wmul 0074                          _T1CKPS0 0084                          _T1CKPS1 0085  
                        _T1OSCEN 0083                        MOT_Init@M 0035                     ??_TMR0_Start 0034  
                   ??_TMR1_Start 0078                     ??_MOT_Update 0034                          _SSD_Out 0489  
                        _VC_Init 055F                  SSD_SetValue@ssd 0036            __size_of_Firing_Pulse 0011  
                        _SW_Init 03CD                  SSD_SetState@ssd 0037                     ?_SW_GetState 0070  
                __size_of___bmul 0017                     ??_SSD_Update 003A               __end_of_TMR0_Start 0623  
             __end_of_TMR1_Start 0543                      _Motor_speed 004C               __end_of_MOT_Update 037E  
                        __ptext1 0543                          __ptext2 01B1                          __ptext3 05D8  
                        __ptext4 05EA                          __ptext5 055F                          __ptext6 0595  
                        __ptext7 063D                          __ptext8 0618                          __ptext9 0645  
            _Target_firing_angle 004A                        _DISP_Init 04B6                     _Firing_Pulse 05FB  
                        clrloop0 0636     MOT_Update@motor_tick_counter 007D                     ?_Generic_ISR 0070  
           end_of_initialization 002C               __end_of_SSD_Update 0489                 TMR1_Start@Degree 0076  
          i1___wmul@multiplicand 0072                        _TMR0_Init 0645                        _TMR1_Init 063D  
           __size_of_VC_GetSpeed 0004                     ??_Get_actual 0070                       ?_DISP_Init 0070  
             _MOT_SetTargetAngle 05EA      __size_of_TMR1_CheckOverflow 0006                    ??_DISP_Update 0037  
            ?_MOT_SetTargetAngle 0070                        _VC_update 0543               __end_of_Get_actual 065B  
                      _SW_Update 0030                   __end_of___bmul 05C5             ??_MOT_SetTargetAngle 0034  
                  __pidataCOMMON 065F                __size_of_TMR0_ISR 001A                __size_of_TMR1_ISR 000A  
                     ?_TMR0_Init 0070                    ?_SSD_SetValue 0034                       ?_TMR1_Init 0070  
     __end_of_TMR0_CheckOverFlow 065F                    ?_SSD_SetState 0034                __size_of_MOT_Init 0019  
              __size_of_SSD_Init 004F              start_initialization 000F                __size_ofi1___wmul 0025  
              SSD_SetState@state 0034                      SSD_Init@ssd 003F                   SSD_Init@symbol 003A  
            __end_of_DISP_Update 02D7                       ?_VC_update 0070                         ??___bmul 0035  
           __size_of_SW_GetState 0012                       init_fetch0 05C5                       ?_SW_Update 0070  
                    __pdataBANK0 0041                   ??_SSD_SetValue 0035                   ??_SSD_SetState 0035  
                    ??_DISP_Init 0040                      __pbssCOMMON 007C                        ___latbits 0002  
                  __pcstackBANK0 0034            SSD_Update@SSD_counter 002D                         ?_SSD_Out 0038  
                       ?_VC_Init 0070                         ?_SW_Init 0070             __size_of_Generic_ISR 0025  
                      __pnvBANK0 0049                      ??_TMR0_Init 0034                      ??_TMR1_Init 0034  
       ??_handling_switch_events 003A                     SW_Init@index 0039                      _DISP_Update 024E  
              interrupt_function 0004                        clear_ram0 0635                      ??_VC_update 003C  
                       _ISR_FLAG 0033                         _TMR0_ISR 057B                      ??_SW_Update 0038  
                       _TMR1_ISR 0623                         _MOT_Init 0595                         _SSD_Data 0041  
                       _SSD_Init 037E                         i1___wmul 0500                         _SWs_Info 0020  
               __size_of_SSD_Out 002D                 __size_of_VC_Init 001C             __end_of_SSD_SetValue 0618  
           __end_of_SSD_SetState 045A                 __size_of_SW_Init 004E                       SSD_Out@ssd 0039  
                  ??_VC_GetSpeed 0034  __size_of_handling_switch_events 009D       __end_of_TMR1_CheckOverflow 0653  
                       __ptext10 0030                         __ptext11 03CD                         __ptext20 0489  
                       __ptext12 05AE                         __ptext21 041B                         __ptext13 045A  
                       __ptext30 065B                         __ptext22 04DB                         __ptext14 032B  
                       __ptext23 0623                         __ptext15 024E                         __ptext24 05FB  
                       __ptext16 0653                         __ptext25 064D                         __ptext17 060C  
                       __ptext26 057B                         __ptext18 04B6                         __ptext27 0525  
                       __ptext19 037E                         __ptext28 0500                         __ptext29 0657  
             _TMR0_CheckOverFlow 065B                SSD_Out@ssd_symbol 0038                    __size_of_main 0054  
            ?_TMR0_CheckOverFlow 0070      __size_of_MOT_SetTargetAngle 0011             ??_TMR0_CheckOverFlow 0070  
            __end_of_VC_GetSpeed 0657          DISP_Update@DISP_counter 0029                         init_ram0 05C9  
                       intlevel1 0000           _handling_switch_events 01B1                    ??_SW_GetState 0038  
                    _motor_state 0049                    ?_Firing_Pulse 0070            __size_of_SSD_SetValue 000C  
          __size_of_SSD_SetState 003F                       _TMR0_Start 0618              VC_update@VC_counter 0048  
                     _TMR1_Start 0525                     ?_DISP_Update 0070                       _MOT_Update 032B  
                  ??_Generic_ISR 007A                     _SSD_DotState 0031  
