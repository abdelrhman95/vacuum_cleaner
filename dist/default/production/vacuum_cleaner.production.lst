

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jan 15 03:09:55 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.10
    20                           ; Generated 31/07/2019 GMT
    21                           ; 
    22                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  000E                     	;# 
   129  000F                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0014                     	;# 
   135  0015                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0017                     	;# 
   139  0018                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001D                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  0081                     	;# 
   149  0085                     	;# 
   150  0086                     	;# 
   151  0087                     	;# 
   152  0088                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0098                     	;# 
   162  0099                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  010E                     	;# 
   170  010F                     	;# 
   171  018C                     	;# 
   172  018D                     	;# 
   173  0000                     	;# 
   174  0001                     	;# 
   175  0002                     	;# 
   176  0003                     	;# 
   177  0004                     	;# 
   178  0005                     	;# 
   179  0006                     	;# 
   180  0007                     	;# 
   181  0008                     	;# 
   182  0009                     	;# 
   183  000A                     	;# 
   184  000B                     	;# 
   185  000C                     	;# 
   186  000D                     	;# 
   187  000E                     	;# 
   188  000E                     	;# 
   189  000F                     	;# 
   190  0010                     	;# 
   191  0011                     	;# 
   192  0012                     	;# 
   193  0013                     	;# 
   194  0014                     	;# 
   195  0015                     	;# 
   196  0015                     	;# 
   197  0016                     	;# 
   198  0017                     	;# 
   199  0018                     	;# 
   200  0019                     	;# 
   201  001A                     	;# 
   202  001B                     	;# 
   203  001B                     	;# 
   204  001C                     	;# 
   205  001D                     	;# 
   206  001E                     	;# 
   207  001F                     	;# 
   208  0081                     	;# 
   209  0085                     	;# 
   210  0086                     	;# 
   211  0087                     	;# 
   212  0088                     	;# 
   213  0089                     	;# 
   214  008C                     	;# 
   215  008D                     	;# 
   216  008E                     	;# 
   217  0091                     	;# 
   218  0092                     	;# 
   219  0093                     	;# 
   220  0094                     	;# 
   221  0098                     	;# 
   222  0099                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  009F                     	;# 
   227  010C                     	;# 
   228  010D                     	;# 
   229  010E                     	;# 
   230  010F                     	;# 
   231  018C                     	;# 
   232  018D                     	;# 
   233  0000                     	;# 
   234  0001                     	;# 
   235  0002                     	;# 
   236  0003                     	;# 
   237  0004                     	;# 
   238  0005                     	;# 
   239  0006                     	;# 
   240  0007                     	;# 
   241  0008                     	;# 
   242  0009                     	;# 
   243  000A                     	;# 
   244  000B                     	;# 
   245  000C                     	;# 
   246  000D                     	;# 
   247  000E                     	;# 
   248  000E                     	;# 
   249  000F                     	;# 
   250  0010                     	;# 
   251  0011                     	;# 
   252  0012                     	;# 
   253  0013                     	;# 
   254  0014                     	;# 
   255  0015                     	;# 
   256  0015                     	;# 
   257  0016                     	;# 
   258  0017                     	;# 
   259  0018                     	;# 
   260  0019                     	;# 
   261  001A                     	;# 
   262  001B                     	;# 
   263  001B                     	;# 
   264  001C                     	;# 
   265  001D                     	;# 
   266  001E                     	;# 
   267  001F                     	;# 
   268  0081                     	;# 
   269  0085                     	;# 
   270  0086                     	;# 
   271  0087                     	;# 
   272  0088                     	;# 
   273  0089                     	;# 
   274  008C                     	;# 
   275  008D                     	;# 
   276  008E                     	;# 
   277  0091                     	;# 
   278  0092                     	;# 
   279  0093                     	;# 
   280  0094                     	;# 
   281  0098                     	;# 
   282  0099                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  010C                     	;# 
   288  010D                     	;# 
   289  010E                     	;# 
   290  010F                     	;# 
   291  018C                     	;# 
   292  018D                     	;# 
   293                           
   294                           	psect	idataBANK0
   295  06C5                     __pidataBANK0:	
   296                           
   297                           ;initializer for _SSD_Data
   298  06C5  3408               	retlw	8
   299  06C6  3448               	retlw	72
   300  06C7  3449               	retlw	73
   301  06C8  3400               	retlw	0
   302                           
   303                           ;initializer for _SSD_Values
   304  06C9  3403               	retlw	3
   305  06CA  3400               	retlw	0
   306  06CB  3400               	retlw	0
   307  0008                     _PORTD	set	8
   308  0006                     _PORTB	set	6
   309  0088                     _TRISD	set	136
   310  0086                     _TRISB	set	134
   311                           
   312                           ; #config settings
   313  0000                     
   314                           	psect	cinit
   315  07DF                     start_initialization:	
   316  07DF                     __initialization:	
   317                           
   318                           ; Initialize objects allocated to BANK0
   319  07DF  1383               	bcf	3,7	;select IRP bank0
   320  07E0  3034               	movlw	low (__pdataBANK0+7)
   321  07E1  00FD               	movwf	btemp+-1
   322  07E2  3006               	movlw	high __pidataBANK0
   323  07E3  00FE               	movwf	btemp
   324  07E4  30C5               	movlw	low __pidataBANK0
   325  07E5  00FF               	movwf	btemp+1
   326  07E6  302D               	movlw	low __pdataBANK0
   327  07E7  0084               	movwf	4
   328  07E8  120A  118A  26DA  120A  118A  	fcall	init_ram0
   329                           
   330                           ; Clear objects allocated to BANK0
   331  07ED  01A0               	clrf	__pbssBANK0& (0+127)
   332  07EE  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   333  07EF  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   334  07F0  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   335  07F1  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   336  07F2  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   337  07F3  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   338  07F4  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   339  07F5  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   340  07F6  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   341  07F7  01AA               	clrf	(__pbssBANK0+10)& (0+127)
   342  07F8  01AB               	clrf	(__pbssBANK0+11)& (0+127)
   343  07F9  01AC               	clrf	(__pbssBANK0+12)& (0+127)
   344                           
   345                           ; Clear objects allocated to COMMON
   346  07FA  01FB               	clrf	__pbssCOMMON& (0+127)
   347  07FB  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   348  07FC                     end_of_initialization:	
   349                           ;End of C runtime variable initialization code
   350                           
   351  07FC                     __end_of__initialization:	
   352  07FC  0183               	clrf	3
   353  07FD  120A  118A  2EE9   	ljmp	_main	;jump to C main() function
   354                           
   355                           	psect	bssCOMMON
   356  007B                     __pbssCOMMON:	
   357  007B                     _SSD_DotState:	
   358  007B                     	ds	1
   359  007C                     _SSD_current:	
   360  007C                     	ds	1
   361                           
   362                           	psect	bssBANK0
   363  0020                     __pbssBANK0:	
   364  0020                     _SWs_Info:	
   365  0020                     	ds	9
   366  0029                     SSD_Update@SSD_counter:	
   367  0029                     	ds	2
   368  002B                     SW_Update@SW_counter:	
   369  002B                     	ds	2
   370                           
   371                           	psect	dataBANK0
   372  002D                     __pdataBANK0:	
   373  002D                     _SSD_Data:	
   374  002D                     	ds	4
   375  0031                     _SSD_Values:	
   376  0031                     	ds	3
   377                           
   378                           	psect	inittext
   379  06D6                     init_fetch0:	
   380                           ;	Called with low address in FSR and high address in W
   381                           
   382  06D6  087E               	movf	btemp,w
   383  06D7  008A               	movwf	10
   384  06D8  087F               	movf	btemp+1,w
   385  06D9  0082               	movwf	2
   386  06DA                     init_ram0:	
   387                           ;Called with:
   388                           ;	high address of idata address in btemp 
   389                           ;	low address of idata address in btemp+1 
   390                           ;	low address of data in FSR
   391                           ;	high address + 1 of data in btemp-1
   392                           
   393  06DA  120A  118A  26D6  120A  118A  	fcall	init_fetch0
   394  06DF  0080               	movwf	0
   395  06E0  0A84               	incf	4,f
   396  06E1  0804               	movf	4,w
   397  06E2  067D               	xorwf	btemp+-1,w
   398  06E3  1903               	btfsc	3,2
   399  06E4  3400               	retlw	0
   400  06E5  0AFF               	incf	btemp+1,f
   401  06E6  1903               	btfsc	3,2
   402  06E7  0AFE               	incf	btemp,f
   403  06E8  2EDA               	goto	init_ram0
   404                           
   405                           	psect	cstackCOMMON
   406  0070                     __pcstackCOMMON:	
   407  0070                     ?_SSD_Init:	
   408  0070                     ?_SSD_Update:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_SSD_SetValue:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?_SSD_SetState:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_main:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     SSD_SetValue@ssd_symbol:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     SSD_SetState@state:	
   424                           ; 1 bytes @ 0x0
   425                           
   426                           
   427                           ; 1 bytes @ 0x0
   428  0070                     	ds	1
   429  0071                     ??_SSD_SetValue:	
   430  0071                     ??_SSD_SetState:	
   431                           ; 1 bytes @ 0x1
   432                           
   433                           
   434                           ; 1 bytes @ 0x1
   435  0071                     	ds	1
   436  0072                     SSD_SetValue@ssd:	
   437                           
   438                           ; 1 bytes @ 0x2
   439  0072                     	ds	1
   440  0073                     SSD_SetState@ssd:	
   441                           
   442                           ; 1 bytes @ 0x3
   443  0073                     	ds	1
   444  0074                     ?_SSD_Out:	
   445  0074                     SSD_Out@ssd_symbol:	
   446                           ; 1 bytes @ 0x4
   447                           
   448                           
   449                           ; 1 bytes @ 0x4
   450  0074                     	ds	1
   451  0075                     ??_SSD_Out:	
   452  0075                     SSD_Out@ssd:	
   453                           ; 1 bytes @ 0x5
   454                           
   455                           
   456                           ; 1 bytes @ 0x5
   457  0075                     	ds	1
   458  0076                     ??_SSD_Init:	
   459  0076                     ??_SSD_Update:	
   460                           ; 1 bytes @ 0x6
   461                           
   462                           
   463                           ; 1 bytes @ 0x6
   464  0076                     	ds	4
   465  007A                     SSD_Init@ssd:	
   466                           
   467                           ; 1 bytes @ 0xA
   468  007A                     	ds	1
   469  007B                     ??_main:	
   470                           
   471                           	psect	maintext
   472  06E9                     __pmaintext:	
   473                           ; 1 bytes @ 0xB
   474 ;;
   475 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   476 ;;
   477 ;; *************** function _main *****************
   478 ;; Defined at:
   479 ;;		line 30 in file "main.c"
   480 ;; Parameters:    Size  Location     Type
   481 ;;		None
   482 ;; Auto vars:     Size  Location     Type
   483 ;;		None
   484 ;; Return value:  Size  Location     Type
   485 ;;                  1    wreg      void 
   486 ;; Registers used:
   487 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   488 ;; Tracked objects:
   489 ;;		On entry : B00/0
   490 ;;		On exit  : 0/0
   491 ;;		Unchanged: 0/0
   492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   493 ;;      Params:         0       0       0       0       0
   494 ;;      Locals:         0       0       0       0       0
   495 ;;      Temps:          0       0       0       0       0
   496 ;;      Totals:         0       0       0       0       0
   497 ;;Total ram usage:        0 bytes
   498 ;; Hardware stack levels required when called:    3
   499 ;; This function calls:
   500 ;;		_SSD_Init
   501 ;;		_SSD_SetValue
   502 ;;		_SSD_Update
   503 ;; This function is called by:
   504 ;;		Startup code after reset
   505 ;; This function uses a non-reentrant model
   506 ;;
   507                           
   508                           
   509                           ;psect for function _main
   510  06E9                     _main:	
   511  06E9                     l985:	
   512                           ;incstack = 0
   513                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   514                           
   515  06E9  3000               	movlw	0
   516  06EA  120A  118A  2760  120A  118A  	fcall	_SSD_Init
   517  06EF  3001               	movlw	1
   518  06F0  120A  118A  2760  120A  118A  	fcall	_SSD_Init
   519  06F5  3002               	movlw	2
   520  06F6  120A  118A  2760  120A  118A  	fcall	_SSD_Init
   521  06FB                     l11:	
   522  06FB  120A  118A  2733  120A  118A  	fcall	_SSD_Update
   523  0700  01F0               	clrf	SSD_SetValue@ssd_symbol
   524  0701  0AF0               	incf	SSD_SetValue@ssd_symbol,f
   525  0702  3001               	movlw	1
   526  0703  120A  118A  26CC  120A  118A  	fcall	_SSD_SetValue
   527  0708  2EFB               	goto	l11
   528  0709  120A  118A  2800   	ljmp	start
   529  070C                     __end_of_main:	
   530                           
   531                           	psect	text1
   532  0733                     __ptext1:	
   533 ;; *************** function _SSD_Update *****************
   534 ;; Defined at:
   535 ;;		line 60 in file "SSD.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;		None
   538 ;; Auto vars:     Size  Location     Type
   539 ;;		None
   540 ;; Return value:  Size  Location     Type
   541 ;;                  1    wreg      void 
   542 ;; Registers used:
   543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   544 ;; Tracked objects:
   545 ;;		On entry : 0/0
   546 ;;		On exit  : 0/0
   547 ;;		Unchanged: 0/0
   548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   549 ;;      Params:         0       0       0       0       0
   550 ;;      Locals:         0       0       0       0       0
   551 ;;      Temps:          1       0       0       0       0
   552 ;;      Totals:         1       0       0       0       0
   553 ;;Total ram usage:        1 bytes
   554 ;; Hardware stack levels used:    1
   555 ;; Hardware stack levels required when called:    2
   556 ;; This function calls:
   557 ;;		_SSD_Out
   558 ;; This function is called by:
   559 ;;		_main
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           
   564                           ;psect for function _SSD_Update
   565  0733                     _SSD_Update:	
   566  0733                     l967:	
   567                           ;incstack = 0
   568                           ; Regs used in _SSD_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   569                           
   570                           
   571                           ;SSD.c: 62:     static tWord SSD_counter = 0;;SSD.c: 66:     SSD_counter += (5);
   572  0733  3005               	movlw	5
   573  0734  1283               	bcf	3,5	;RP0=0, select bank0
   574  0735  1303               	bcf	3,6	;RP1=0, select bank0
   575  0736  07A9               	addwf	SSD_Update@SSD_counter,f
   576  0737  1803               	skipnc
   577  0738  0AAA               	incf	SSD_Update@SSD_counter+1,f
   578  0739  3000               	movlw	0
   579  073A  07AA               	addwf	SSD_Update@SSD_counter+1,f
   580  073B                     l969:	
   581                           
   582                           ;SSD.c: 68:     if (SSD_counter != (5)){
   583  073B  3005               	movlw	5
   584  073C  0629               	xorwf	SSD_Update@SSD_counter,w
   585  073D  042A               	iorwf	SSD_Update@SSD_counter+1,w
   586  073E  1903               	btfsc	3,2
   587  073F  2F41               	goto	u221
   588  0740  2F42               	goto	u220
   589  0741                     u221:	
   590  0741  2F43               	goto	l973
   591  0742                     u220:	
   592  0742  2F5F               	goto	l96
   593  0743                     l973:	
   594                           
   595                           ;SSD.c: 72:     SSD_counter = 0;
   596  0743  01A9               	clrf	SSD_Update@SSD_counter
   597  0744  01AA               	clrf	SSD_Update@SSD_counter+1
   598  0745                     l975:	
   599                           
   600                           ;SSD.c: 76:     SSD_Out(SSD_current, SSD_Values[SSD_current]);
   601  0745  087C               	movf	_SSD_current,w
   602  0746  3E31               	addlw	(low (_SSD_Values| 0))& (0+255)
   603  0747  0084               	movwf	4
   604  0748  1383               	bcf	3,7	;select IRP bank0
   605  0749  0800               	movf	0,w
   606  074A  00F6               	movwf	??_SSD_Update
   607  074B  0876               	movf	??_SSD_Update,w
   608  074C  00F4               	movwf	SSD_Out@ssd_symbol
   609  074D  087C               	movf	_SSD_current,w
   610  074E  120A  118A  270C  120A  118A  	fcall	_SSD_Out
   611  0753                     l977:	
   612                           
   613                           ;SSD.c: 78:     if (SSD_current == SSD_THIRD)
   614  0753  3002               	movlw	2
   615  0754  067C               	xorwf	_SSD_current,w
   616  0755  1D03               	btfss	3,2
   617  0756  2F58               	goto	u231
   618  0757  2F59               	goto	u230
   619  0758                     u231:	
   620  0758  2F5B               	goto	l981
   621  0759                     u230:	
   622  0759                     l979:	
   623                           
   624                           ;SSD.c: 79:     {;SSD.c: 80:         SSD_current = SSD_FIRST;
   625  0759  01FC               	clrf	_SSD_current
   626                           
   627                           ;SSD.c: 81:     } else
   628  075A  2F5F               	goto	l96
   629  075B                     l981:	
   630                           
   631                           ;SSD.c: 82:     {;SSD.c: 83:         SSD_current++;
   632  075B  3001               	movlw	1
   633  075C  00F6               	movwf	??_SSD_Update
   634  075D  0876               	movf	??_SSD_Update,w
   635  075E  07FC               	addwf	_SSD_current,f
   636  075F                     l96:	
   637  075F  0008               	return
   638  0760                     __end_of_SSD_Update:	
   639                           
   640                           	psect	text2
   641  06CC                     __ptext2:	
   642 ;; *************** function _SSD_SetValue *****************
   643 ;; Defined at:
   644 ;;		line 89 in file "SSD.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;  ssd             1    wreg     enum E852
   647 ;;  ssd_symbol      1    0[COMMON] enum E861
   648 ;; Auto vars:     Size  Location     Type
   649 ;;  ssd             1    2[COMMON] enum E852
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   659 ;;      Params:         1       0       0       0       0
   660 ;;      Locals:         1       0       0       0       0
   661 ;;      Temps:          1       0       0       0       0
   662 ;;      Totals:         3       0       0       0       0
   663 ;;Total ram usage:        3 bytes
   664 ;; Hardware stack levels used:    1
   665 ;; This function calls:
   666 ;;		Nothing
   667 ;; This function is called by:
   668 ;;		_main
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           
   673                           ;psect for function _SSD_SetValue
   674  06CC                     _SSD_SetValue:	
   675                           
   676                           ;incstack = 0
   677                           ; Regs used in _SSD_SetValue: [wreg-fsr0h+status,2+status,0]
   678                           ;SSD_SetValue@ssd stored from wreg
   679  06CC  00F2               	movwf	SSD_SetValue@ssd
   680  06CD                     l983:	
   681                           
   682                           ;SSD.c: 89: void SSD_SetValue(tSSD ssd, tSSD_Symbol ssd_symbol);SSD.c: 90: {;SSD.c: 92: 
      +                              SSD_Values[ssd] = ssd_symbol;
   683  06CD  0870               	movf	SSD_SetValue@ssd_symbol,w
   684  06CE  00F1               	movwf	??_SSD_SetValue
   685  06CF  0872               	movf	SSD_SetValue@ssd,w
   686  06D0  3E31               	addlw	(low (_SSD_Values| 0))& (0+255)
   687  06D1  0084               	movwf	4
   688  06D2  0871               	movf	??_SSD_SetValue,w
   689  06D3  1383               	bcf	3,7	;select IRP bank0
   690  06D4  0080               	movwf	0
   691  06D5                     l101:	
   692  06D5  0008               	return
   693  06D6                     __end_of_SSD_SetValue:	
   694                           
   695                           	psect	text3
   696  0760                     __ptext3:	
   697 ;; *************** function _SSD_Init *****************
   698 ;; Defined at:
   699 ;;		line 33 in file "SSD.c"
   700 ;; Parameters:    Size  Location     Type
   701 ;;  ssd             1    wreg     enum E852
   702 ;; Auto vars:     Size  Location     Type
   703 ;;  ssd             1   10[COMMON] enum E852
   704 ;; Return value:  Size  Location     Type
   705 ;;                  1    wreg      void 
   706 ;; Registers used:
   707 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   713 ;;      Params:         0       0       0       0       0
   714 ;;      Locals:         3       0       0       0       0
   715 ;;      Temps:          2       0       0       0       0
   716 ;;      Totals:         5       0       0       0       0
   717 ;;Total ram usage:        5 bytes
   718 ;; Hardware stack levels used:    1
   719 ;; Hardware stack levels required when called:    2
   720 ;; This function calls:
   721 ;;		_SSD_Out
   722 ;;		_SSD_SetState
   723 ;; This function is called by:
   724 ;;		_main
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           
   729                           ;psect for function _SSD_Init
   730  0760                     _SSD_Init:	
   731                           
   732                           ;incstack = 0
   733                           ; Regs used in _SSD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   734                           ;SSD_Init@ssd stored from wreg
   735  0760  00FA               	movwf	SSD_Init@ssd
   736  0761                     l945:	
   737  0761                     l947:	
   738  0761  1683               	bsf	3,5	;RP0=1, select bank1
   739  0762  1303               	bcf	3,6	;RP1=0, select bank1
   740  0763  0188               	clrf	8	;volatile
   741  0764                     l949:	
   742                           
   743                           ;SSD.c: 38:     SSD_Out(ssd, SSD_NULL);
   744  0764  3003               	movlw	3
   745  0765  00F6               	movwf	??_SSD_Init
   746  0766  0876               	movf	??_SSD_Init,w
   747  0767  00F4               	movwf	SSD_Out@ssd_symbol
   748  0768  087A               	movf	SSD_Init@ssd,w
   749  0769  120A  118A  270C  120A  118A  	fcall	_SSD_Out
   750                           
   751                           ;SSD.c: 41:     switch (ssd)
   752  076E  2F81               	goto	l959
   753  076F                     l951:	
   754                           
   755                           ;SSD.c: 44:             ((((TRISB))) = (((TRISB)) & (~(1 << ((7)))))|((0) << ((7))));
   756  076F  1683               	bsf	3,5	;RP0=1, select bank1
   757  0770  1303               	bcf	3,6	;RP1=0, select bank1
   758  0771  0806               	movf	6,w	;volatile
   759  0772  397F               	andlw	127
   760  0773  0086               	movwf	6	;volatile
   761                           
   762                           ;SSD.c: 45:             break;
   763  0774  2F94               	goto	l961
   764  0775                     l953:	
   765                           
   766                           ;SSD.c: 47:             ((((TRISB))) = (((TRISB)) & (~(1 << ((6)))))|((0) << ((6))));
   767  0775  1683               	bsf	3,5	;RP0=1, select bank1
   768  0776  1303               	bcf	3,6	;RP1=0, select bank1
   769  0777  0806               	movf	6,w	;volatile
   770  0778  39BF               	andlw	191
   771  0779  0086               	movwf	6	;volatile
   772                           
   773                           ;SSD.c: 48:             break;
   774  077A  2F94               	goto	l961
   775  077B                     l955:	
   776                           
   777                           ;SSD.c: 50:             ((((TRISB))) = (((TRISB)) & (~(1 << ((5)))))|((0) << ((5))));
   778  077B  1683               	bsf	3,5	;RP0=1, select bank1
   779  077C  1303               	bcf	3,6	;RP1=0, select bank1
   780  077D  0806               	movf	6,w	;volatile
   781  077E  39DF               	andlw	223
   782  077F  0086               	movwf	6	;volatile
   783                           
   784                           ;SSD.c: 51:             break;
   785  0780  2F94               	goto	l961
   786  0781                     l959:	
   787  0781  087A               	movf	SSD_Init@ssd,w
   788  0782  00F6               	movwf	??_SSD_Init
   789  0783  01F7               	clrf	??_SSD_Init+1
   790                           
   791                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   792                           ; Switch size 1, requested type "simple"
   793                           ; Number of cases is 1, Range of values is 0 to 0
   794                           ; switch strategies available:
   795                           ; Name         Instructions Cycles
   796                           ; simple_byte            4     3 (average)
   797                           ; direct_byte           11     8 (fixed)
   798                           ; jumptable            260     6 (fixed)
   799                           ;	Chosen strategy is simple_byte
   800  0784  0877               	movf	??_SSD_Init+1,w
   801  0785  3A00               	xorlw	0	; case 0
   802  0786  1903               	skipnz
   803  0787  2F89               	goto	l1125
   804  0788  2F94               	goto	l961
   805  0789                     l1125:	
   806                           
   807                           ; Switch size 1, requested type "simple"
   808                           ; Number of cases is 3, Range of values is 0 to 2
   809                           ; switch strategies available:
   810                           ; Name         Instructions Cycles
   811                           ; simple_byte           10     6 (average)
   812                           ; direct_byte           17     8 (fixed)
   813                           ; jumptable            260     6 (fixed)
   814                           ;	Chosen strategy is simple_byte
   815  0789  0876               	movf	??_SSD_Init,w
   816  078A  3A00               	xorlw	0	; case 0
   817  078B  1903               	skipnz
   818  078C  2F6F               	goto	l951
   819  078D  3A01               	xorlw	1	; case 1
   820  078E  1903               	skipnz
   821  078F  2F75               	goto	l953
   822  0790  3A03               	xorlw	3	; case 2
   823  0791  1903               	skipnz
   824  0792  2F7B               	goto	l955
   825  0793  2F94               	goto	l961
   826  0794                     l961:	
   827                           
   828                           ;SSD.c: 56:     SSD_SetState(ssd, SSD_OFF);
   829  0794  01F0               	clrf	SSD_SetState@state
   830  0795  087A               	movf	SSD_Init@ssd,w
   831  0796  120A  118A  279C  120A  118A  	fcall	_SSD_SetState
   832  079B                     l90:	
   833  079B  0008               	return
   834  079C                     __end_of_SSD_Init:	
   835                           
   836                           	psect	text4
   837  070C                     __ptext4:	
   838 ;; *************** function _SSD_Out *****************
   839 ;; Defined at:
   840 ;;		line 148 in file "SSD.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;  ssd             1    wreg     enum E852
   843 ;;  ssd_symbol      1    4[COMMON] enum E861
   844 ;; Auto vars:     Size  Location     Type
   845 ;;  ssd             1    5[COMMON] enum E852
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   855 ;;      Params:         1       0       0       0       0
   856 ;;      Locals:         1       0       0       0       0
   857 ;;      Temps:          0       0       0       0       0
   858 ;;      Totals:         2       0       0       0       0
   859 ;;Total ram usage:        2 bytes
   860 ;; Hardware stack levels used:    1
   861 ;; Hardware stack levels required when called:    1
   862 ;; This function calls:
   863 ;;		_SSD_SetState
   864 ;; This function is called by:
   865 ;;		_SSD_Init
   866 ;;		_SSD_Update
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           
   871                           ;psect for function _SSD_Out
   872  070C                     _SSD_Out:	
   873                           
   874                           ;incstack = 0
   875                           ; Regs used in _SSD_Out: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   876                           ;SSD_Out@ssd stored from wreg
   877  070C  00F5               	movwf	SSD_Out@ssd
   878  070D                     l939:	
   879                           
   880                           ;SSD.c: 148: static void SSD_Out(tSSD ssd, tSSD_Symbol ssd_symbol);SSD.c: 149: {;SSD.c: 
      +                          152:     SSD_SetState(SSD_FIRST, SSD_OFF);
   881  070D  01F0               	clrf	SSD_SetState@state
   882  070E  3000               	movlw	0
   883  070F  120A  118A  279C  120A  118A  	fcall	_SSD_SetState
   884                           
   885                           ;SSD.c: 153:     SSD_SetState(SSD_SECONED, SSD_OFF);
   886  0714  01F0               	clrf	SSD_SetState@state
   887  0715  3001               	movlw	1
   888  0716  120A  118A  279C  120A  118A  	fcall	_SSD_SetState
   889                           
   890                           ;SSD.c: 154:     SSD_SetState(SSD_THIRD, SSD_OFF);
   891  071B  01F0               	clrf	SSD_SetState@state
   892  071C  3002               	movlw	2
   893  071D  120A  118A  279C  120A  118A  	fcall	_SSD_SetState
   894  0722                     l941:	
   895                           
   896                           ;SSD.c: 156:     ((((PORTD))) = (SSD_Data[ssd_symbol]));
   897  0722  0874               	movf	SSD_Out@ssd_symbol,w
   898  0723  3E2D               	addlw	(low (_SSD_Data| 0))& (0+255)
   899  0724  0084               	movwf	4
   900  0725  1383               	bcf	3,7	;select IRP bank0
   901  0726  0800               	movf	0,w
   902  0727  1283               	bcf	3,5	;RP0=0, select bank0
   903  0728  1303               	bcf	3,6	;RP1=0, select bank0
   904  0729  0088               	movwf	8	;volatile
   905  072A                     l943:	
   906                           
   907                           ;SSD.c: 159:     SSD_SetState(ssd, SSD_ON);
   908  072A  01F0               	clrf	SSD_SetState@state
   909  072B  0AF0               	incf	SSD_SetState@state,f
   910  072C  0875               	movf	SSD_Out@ssd,w
   911  072D  120A  118A  279C  120A  118A  	fcall	_SSD_SetState
   912  0732                     l125:	
   913  0732  0008               	return
   914  0733                     __end_of_SSD_Out:	
   915                           
   916                           	psect	text5
   917  079C                     __ptext5:	
   918 ;; *************** function _SSD_SetState *****************
   919 ;; Defined at:
   920 ;;		line 120 in file "SSD.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;  ssd             1    wreg     enum E852
   923 ;;  state           1    0[COMMON] enum E857
   924 ;; Auto vars:     Size  Location     Type
   925 ;;  ssd             1    3[COMMON] enum E852
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   935 ;;      Params:         1       0       0       0       0
   936 ;;      Locals:         1       0       0       0       0
   937 ;;      Temps:          2       0       0       0       0
   938 ;;      Totals:         4       0       0       0       0
   939 ;;Total ram usage:        4 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; This function calls:
   942 ;;		Nothing
   943 ;; This function is called by:
   944 ;;		_SSD_Init
   945 ;;		_SSD_Out
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           
   950                           ;psect for function _SSD_SetState
   951  079C                     _SSD_SetState:	
   952                           
   953                           ;incstack = 0
   954                           ; Regs used in _SSD_SetState: [wreg-fsr0h+status,2+status,0]
   955                           ;SSD_SetState@ssd stored from wreg
   956  079C  00F3               	movwf	SSD_SetState@ssd
   957  079D                     l923:	
   958                           
   959                           ;SSD.c: 120: void SSD_SetState(tSSD ssd, tSSD_State state);SSD.c: 121: {;SSD.c: 123:    
      +                           switch (ssd)
   960  079D  2FCB               	goto	l933
   961  079E                     l925:	
   962                           
   963                           ;SSD.c: 126:             ((((PORTB))) = (((PORTB)) & (~(1 << ((7)))))|(state << ((7))));
   964  079E  0870               	movf	SSD_SetState@state,w
   965  079F  00F1               	movwf	??_SSD_SetState
   966  07A0  3007               	movlw	7
   967  07A1                     u195:	
   968  07A1  1003               	clrc
   969  07A2  0DF1               	rlf	??_SSD_SetState,f
   970  07A3  3EFF               	addlw	-1
   971  07A4  1D03               	skipz
   972  07A5  2FA1               	goto	u195
   973  07A6  1283               	bcf	3,5	;RP0=0, select bank0
   974  07A7  1303               	bcf	3,6	;RP1=0, select bank0
   975  07A8  0806               	movf	6,w	;volatile
   976  07A9  397F               	andlw	127
   977  07AA  0471               	iorwf	??_SSD_SetState,w
   978  07AB  0086               	movwf	6	;volatile
   979                           
   980                           ;SSD.c: 127:             break;
   981  07AC  2FDE               	goto	l119
   982  07AD                     l927:	
   983                           
   984                           ;SSD.c: 129:             ((((PORTB))) = (((PORTB)) & (~(1 << ((6)))))|(state << ((6))));
   985  07AD  0870               	movf	SSD_SetState@state,w
   986  07AE  00F1               	movwf	??_SSD_SetState
   987  07AF  3006               	movlw	6
   988  07B0                     u205:	
   989  07B0  1003               	clrc
   990  07B1  0DF1               	rlf	??_SSD_SetState,f
   991  07B2  3EFF               	addlw	-1
   992  07B3  1D03               	skipz
   993  07B4  2FB0               	goto	u205
   994  07B5  1283               	bcf	3,5	;RP0=0, select bank0
   995  07B6  1303               	bcf	3,6	;RP1=0, select bank0
   996  07B7  0806               	movf	6,w	;volatile
   997  07B8  39BF               	andlw	191
   998  07B9  0471               	iorwf	??_SSD_SetState,w
   999  07BA  0086               	movwf	6	;volatile
  1000                           
  1001                           ;SSD.c: 130:             break;
  1002  07BB  2FDE               	goto	l119
  1003  07BC                     l929:	
  1004                           
  1005                           ;SSD.c: 132:             ((((PORTB))) = (((PORTB)) & (~(1 << ((5)))))|(state << ((5))));
  1006  07BC  0870               	movf	SSD_SetState@state,w
  1007  07BD  00F1               	movwf	??_SSD_SetState
  1008  07BE  3005               	movlw	5
  1009  07BF                     u215:	
  1010  07BF  1003               	clrc
  1011  07C0  0DF1               	rlf	??_SSD_SetState,f
  1012  07C1  3EFF               	addlw	-1
  1013  07C2  1D03               	skipz
  1014  07C3  2FBF               	goto	u215
  1015  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  1016  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  1017  07C6  0806               	movf	6,w	;volatile
  1018  07C7  39DF               	andlw	223
  1019  07C8  0471               	iorwf	??_SSD_SetState,w
  1020  07C9  0086               	movwf	6	;volatile
  1021                           
  1022                           ;SSD.c: 133:             break;
  1023  07CA  2FDE               	goto	l119
  1024  07CB                     l933:	
  1025  07CB  0873               	movf	SSD_SetState@ssd,w
  1026  07CC  00F1               	movwf	??_SSD_SetState
  1027  07CD  01F2               	clrf	??_SSD_SetState+1
  1028                           
  1029                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1030                           ; Switch size 1, requested type "simple"
  1031                           ; Number of cases is 1, Range of values is 0 to 0
  1032                           ; switch strategies available:
  1033                           ; Name         Instructions Cycles
  1034                           ; simple_byte            4     3 (average)
  1035                           ; direct_byte           11     8 (fixed)
  1036                           ; jumptable            260     6 (fixed)
  1037                           ;	Chosen strategy is simple_byte
  1038  07CE  0872               	movf	??_SSD_SetState+1,w
  1039  07CF  3A00               	xorlw	0	; case 0
  1040  07D0  1903               	skipnz
  1041  07D1  2FD3               	goto	l1127
  1042  07D2  2FDE               	goto	l119
  1043  07D3                     l1127:	
  1044                           
  1045                           ; Switch size 1, requested type "simple"
  1046                           ; Number of cases is 3, Range of values is 0 to 2
  1047                           ; switch strategies available:
  1048                           ; Name         Instructions Cycles
  1049                           ; simple_byte           10     6 (average)
  1050                           ; direct_byte           17     8 (fixed)
  1051                           ; jumptable            260     6 (fixed)
  1052                           ;	Chosen strategy is simple_byte
  1053  07D3  0871               	movf	??_SSD_SetState,w
  1054  07D4  3A00               	xorlw	0	; case 0
  1055  07D5  1903               	skipnz
  1056  07D6  2F9E               	goto	l925
  1057  07D7  3A01               	xorlw	1	; case 1
  1058  07D8  1903               	skipnz
  1059  07D9  2FAD               	goto	l927
  1060  07DA  3A03               	xorlw	3	; case 2
  1061  07DB  1903               	skipnz
  1062  07DC  2FBC               	goto	l929
  1063  07DD  2FDE               	goto	l119
  1064  07DE                     l119:	
  1065  07DE  0008               	return
  1066  07DF                     __end_of_SSD_SetState:	
  1067  007E                     btemp	set	126	;btemp
  1068  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      13
    BANK0            80      0      20
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_SSD_Init
    _SSD_Update->_SSD_Out
    _SSD_Init->_SSD_Out
    _SSD_Out->_SSD_SetState

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2006
                           _SSD_Init
                       _SSD_SetValue
                         _SSD_Update
 ---------------------------------------------------------------------------------
 (1) _SSD_Update                                           1     1      0     664
                                              6 COMMON     1     1      0
                            _SSD_Out
 ---------------------------------------------------------------------------------
 (1) _SSD_SetValue                                         3     2      1     120
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _SSD_Init                                             5     5      0    1222
                                              6 COMMON     5     5      0
                            _SSD_Out
                       _SSD_SetState
 ---------------------------------------------------------------------------------
 (2) _SSD_Out                                              2     1      1     664
                                              4 COMMON     2     1      1
                       _SSD_SetState
 ---------------------------------------------------------------------------------
 (3) _SSD_SetState                                         4     3      1     468
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SSD_Init
     _SSD_Out
       _SSD_SetState
     _SSD_SetState
   _SSD_SetValue
   _SSD_Update
     _SSD_Out
       _SSD_SetState

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      14       5       25.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      21      12        0.0%
ABS                  0      0      21       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jan 15 03:09:55 2020

             _SSD_Values 0031                        pc 0002               _SSD_Update 0733  
            __CFG_CP$OFF 0000                       l11 06FB                       l90 079B  
                     l96 075F                       fsr 0004             _SSD_SetValue 06CC  
           _SSD_SetState 079C                      l101 06D5                      l125 0732  
                    l119 07DE                      l923 079D                      l925 079E  
                    l933 07CB                      l941 0722                      l927 07AD  
                    l943 072A                      l951 076F                      l929 07BC  
                    l953 0775                      l961 0794                      l945 0761  
                    l939 070D                      l955 077B                      l947 0761  
                    l949 0764                      l981 075B                      l973 0743  
                    l959 0781                      l983 06CD                      l975 0745  
                    l967 0733                      l977 0753                      l969 073B  
                    l985 06E9                      l979 0759                      u220 0742  
                    u205 07B0                      u221 0741                      u230 0759  
                    u215 07BF                      u231 0758             __CFG_CPD$OFF 0000  
                    u195 07A1                      fsr0 0004                      indf 0000  
    SW_Update@SW_counter 002B             __CFG_FOSC$XT 0000              _SSD_current 007C  
           __CFG_LVP$OFF 0000                     l1125 0789                     l1127 07D3  
           __CFG_WRT$OFF 0000                     _main 06E9                     btemp 007E  
        __end_of_SSD_Out 0733                     start 0000                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _PORTB 0006                    _PORTD 0008  
                  _TRISB 0086                    _TRISD 0088         __end_of_SSD_Init 079C  
         __CFG_BOREN$OFF 0000                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07DF             __end_of_main 070C  
            ?_SSD_Update 0070                   ??_main 007B                ??_SSD_Out 0075  
         __CFG_PWRTE$OFF 0000      __size_of_SSD_Update 002D  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 06C5                ?_SSD_Init 0070  
 SSD_SetValue@ssd_symbol 0070               __pbssBANK0 0020               __pmaintext 06E9  
             ??_SSD_Init 0076                  _SSD_Out 070C          SSD_SetValue@ssd 0072  
        SSD_SetState@ssd 0073             ??_SSD_Update 0076                  __ptext1 0733  
                __ptext2 06CC                  __ptext3 0760                  __ptext4 070C  
                __ptext5 079C     end_of_initialization 07FC       __end_of_SSD_Update 0760  
          ?_SSD_SetValue 0070            ?_SSD_SetState 0070        __size_of_SSD_Init 003C  
    start_initialization 07DF        SSD_SetState@state 0070              SSD_Init@ssd 007A  
             init_fetch0 06D6              __pdataBANK0 002D           ??_SSD_SetValue 0071  
         ??_SSD_SetState 0071              __pbssCOMMON 007B                ___latbits 0002  
  SSD_Update@SSD_counter 0029                 ?_SSD_Out 0074                 _SSD_Data 002D  
               _SSD_Init 0760                 _SWs_Info 0020         __size_of_SSD_Out 0027  
   __end_of_SSD_SetValue 06D6     __end_of_SSD_SetState 07DF               SSD_Out@ssd 0075  
      SSD_Out@ssd_symbol 0074            __size_of_main 0023                 init_ram0 06DA  
  __size_of_SSD_SetValue 000A    __size_of_SSD_SetState 0043             _SSD_DotState 007B  
